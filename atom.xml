<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle></subtitle>
	<link href="https://scar.tw/atom.xml" rel="self" />
	<link href="https://scar.tw/" />
	<id>urn:uuid:4d418d05-9f8f-0741-8939-1476077aab63</id>
	<updated>2018-10-01T14:35:21+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>https://scar.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[HHKB on MacBook]]></title>
		<link href="https://scar.tw/article/2018/10/01/hkkb-on-macbook/" />
		<id>urn:uuid:6d8b5719-ae37-2153-6e50-011c935ed7f8</id>
		<updated>2018-10-01T12:48:00+08:00</updated>
		<summary type="html"><![CDATA[<p>最近因為工作需求把開發平台從 <code>Linux</code> 換成了 <code>macOS</code>，當然連周邊設備也一起搬過來了，遇到的最大問題就是快捷鍵不同的問題。</p>
<p>但是最大的問題就是 <code>macOS</code> 按鍵設定在 <code>HHKB</code> 上的對應完全不同，所以既要做相對應的變更。</p>
<!--more-->
<h2>HHKB Switch</h2>
<p>在硬體的開關從原本的 <code>101110</code> 改成了 <code>011111</code> 用來對應 <code>MacBook</code> 的快捷鍵。</p>
<h2>macOS Keyboard Mapping for HHKB</h2>
<p>接下來修改鍵盤的對應，修改內容如下：</p>
<ul>
<li>Control -&gt; Commnad</li>
<li>Option -&gt; Control</li>
<li>Commnad -&gt; Option</li>
</ul>
<p><img src="/images/hhkb-on-macbook/000.png" alt="對應設定" /></p>
<p>最後可以用 <a href="http://keyboardchecker.com/">Keyboard Checker</a> 來測試一下按鍵對應。</p>
<h2>完美？</h2>
<p>不對！<code>macOS</code> 獨一無二的快捷鍵設定，完全跟 <code>Linux</code> 不同還是需要習慣。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[使用 Docker 打造多 PHP 版本開發環境]]></title>
		<link href="https://scar.tw/article/2018/08/19/using-docker-make-multiple-version-php-envs/" />
		<id>urn:uuid:6bbadac1-7a9f-cc62-5cae-1fd6dc2996e4</id>
		<updated>2018-08-19T00:20:12+08:00</updated>
		<summary type="html"><![CDATA[<p>過去在這幾年間 <code>PHP</code> 終於從 <code>5.x</code> 升版到了 <code>7.x</code>，所以公司內的新專案也因應改版也順勢使用新版本，那原本的專案就保持舊版本或是之後有計畫升級新版本。</p>
<p>但這樣就會造成環境混雜的問題，所以同時可能會有 <code>5.4</code>、<code>5.6</code> 或是 <code>7.0</code> 的專案需要開發。</p>
<p>而在一般的開發環境之下，每台電腦就只能安裝單一版本的 <code>PHP</code>，就算有機會安裝多個環境也有機會造成環境污染，以及無法快速切換版本。</p>
<p>所以利用 <code>Container</code> 的方式將不同的環境打包到個別的 <code>Image</code> 獨立運作，再利用 <code>PHP-FPM</code> 可以聆聽 <code>socket</code> 或是 <code>port</code> 的特性，以及 <code>Nginx</code> 的 <code>Proxy</code> 將請求送到不同的環境去執行。</p>
<!--more-->
<h2>撰寫 Dockerfile</h2>
<p>這邊我們使用 <code>Alpine Linux</code> 作為 <code>Image</code> 的基底，再安裝上我們所需要的套件，下面就使用 <code>Nginx</code> 及 <code>PHP</code> 為範例，不同的 <code>PHP</code> 版本只需要透過修改 <code>Alpine Linux</code> 的版本來調整。</p>
<h3>Nginx 1.14</h3>
<pre><code class="language-dockerfile">FROM alpine:3.8
MAINTAINER Scar Wu &lt;xneriscool@gmail.com&gt;
WORKDIR /build

RUN VERSION="1.14" \
    &amp;&amp; NEED_APK="nginx&gt;$VERSION" \
    &amp;&amp; apk --update add $NEED_APK

RUN mkdir /volume \
    &amp;&amp; mkdir /volume/log \
    &amp;&amp; mkdir /volume/data \
    &amp;&amp; mkdir /volume/config \

    &amp;&amp; mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak \
    &amp;&amp; ln -s /volume/config/nginx.conf /etc/nginx/nginx.conf

VOLUME ["/volume/config", "/volume/data", "/volume/log"]

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

EXPOSE 80/tcp
EXPOSE 443/tcp

CMD /usr/sbin/nginx -g "daemon off;"</code></pre>
<h3>PHP 5.6</h3>
<pre><code class="language-dockerfile">FROM alpine:3.8
MAINTAINER Scar Wu &lt;xneriscool@gmail.com&gt;
WORKDIR /build

RUN VERSION="5.6" \
    &amp;&amp; NEED_APK="php5&gt;$VERSION php5-fpm&gt;$VERSION" \
    &amp;&amp; apk --update add $NEED_APK

ENV PHP_DIR /etc/php5

RUN mkdir /volume \
    &amp;&amp; mkdir /volume/log \
    &amp;&amp; mkdir /volume/data \
    &amp;&amp; mkdir /volume/config \

    &amp;&amp; mv $PHP_DIR/php.ini $PHP_DIR/php.ini.bak \
    &amp;&amp; ln -s /volume/config/php.ini $PHP_DIR/php.ini \

    &amp;&amp; mv $PHP_DIR/php-fpm.conf $PHP_DIR/php-fpm.conf.bak \
    &amp;&amp; ln -s /volume/config/php-fpm.conf $PHP_DIR/php-fpm.conf

VOLUME ["/volume/config", "/volume/data", "/volume/log"]

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

RUN addgroup nginx \
    &amp;&amp; adduser -D nginx -G nginx

EXPOSE 9000/tcp

CMD /usr/bin/php-fpm5 --nodaemonize</code></pre>
<h3>PHP 7.2</h3>
<pre><code class="language-dockerfile">FROM alpine:3.8
MAINTAINER Scar Wu &lt;xneriscool@gmail.com&gt;
WORKDIR /build

RUN VERSION="7.2" \
    &amp;&amp; NEED_APK="php7&gt;$VERSION php7-fpm&gt;$VERSION" \
    &amp;&amp; apk --update add $NEED_APK

ENV PHP_DIR /etc/php7

RUN mkdir /volume \
    &amp;&amp; mkdir /volume/log \
    &amp;&amp; mkdir /volume/data \
    &amp;&amp; mkdir /volume/config \

    &amp;&amp; mv $PHP_DIR/php.ini $PHP_DIR/php.ini.bak \
    &amp;&amp; ln -s /volume/config/php.ini $PHP_DIR/php.ini \

    &amp;&amp; mv $PHP_DIR/php-fpm.conf $PHP_DIR/php-fpm.conf.bak \
    &amp;&amp; ln -s /volume/config/php-fpm.conf $PHP_DIR/php-fpm.conf

VOLUME ["/volume/config", "/volume/data", "/volume/log"]

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

RUN addgroup nginx \
    &amp;&amp; adduser -D nginx -G nginx

EXPOSE 9000/tcp

CMD /usr/sbin/php-fpm7 --nodaemonize</code></pre>
<h2>調整 Server Config</h2>
<p>在這裡我們需要修改 <code>Nginx</code> 的 <code>FactCGI</code> 傳遞的方式，以及 <code>PHP-FPM</code> 的聆聽模式，<code>Nginx</code> 可以透過判斷 <code>request_uri</code> 的方式指定將不同的請求送到不同的 <code>PHP</code> 的版本。</p>
<p>在這邊的設定檔案不是完整檔，只是表名設定的重點，完整的設定在我的 <code>Github</code> 上有，見下方連結。</p>
<h3>Nginx: www.conf</h3>
<pre><code class="language-nginx">server {
    listen 80;

    root /volume/data;
    index index.html index.htm index.php;

    charset utf-8;
    autoindex off;

    error_page 403 = 404;
    error_page 404 /404.html;

    location ~ /\.ht {
        deny all;
    }

    location / {
        try_files $uri $uri/ /index.php;
    }

    location ~ \.php$ {
        fastcgi_pass PHP-7.2:9000;
        fastcgi_index index.php;
        fastcgi_split_path_info ^(.+\.php)(.*)$;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        if ($request_uri = "/php56") {
            fastcgi_pass PHP-5.6:9000;
        }

        if ($request_uri = "/php72") {
            fastcgi_pass PHP-7.2:9000;
        }
    }
}</code></pre>
<h3>PHP-FPM: pools/main.conf</h3>
<pre><code class="language-ini">[main]
listen = 0.0.0.0:9000</code></pre>
<h2>撰寫 Docker Compose File</h2>
<p>利用 <code>Docker Compose</code> 將環境設定起來，這邊要注意的是將相對應資料夾掛到 <code>Container</code> 中，再來是 <code>external_links</code> 及 <code>depends_on</code> 的關聯設定。</p>
<pre><code class="language-yaml">version: '3'
services:

    nginx:
        image: scarwu/demo-nginx:1.14
        volumes:
            - ./config/Nginx:/volume/config
            - ./data:/volume/data
            - ./log/nginx:/volume/log
        ports:
            - "80:80"
        external_links:
            - "php56:PHP-5.6"
            - "php72:PHP-7.2"
        depends_on:
            - "php56"
            - "php72"
        restart: always

    php56:
        image: scarwu/demo-php:5.6
        volumes:
            - ./config/PHP-5.6:/volume/config
            - ./data:/volume/data
            - ./log/php56:/volume/log
        restart: always

    php72:
        image: scarwu/demo-php:7.2
        volumes:
            - ./config/PHP-7.2:/volume/config
            - ./data:/volume/data
            - ./log/php72:/volume/log
        restart: always</code></pre>
<h2>Source Code</h2>
<p>下面是範例專案，至於要怎樣投入到生產環境那就要看個人的調校了。</p>
<p><a href="https://github.com/scarwu/MultiPHPEnvWithDocker">MultiPHPEnvWithDocker</a></p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[個人工具的改進]]></title>
		<link href="https://scar.tw/article/2018/08/14/improve-my-tools/" />
		<id>urn:uuid:4aa2ecbf-54f3-1dd8-ca69-6f2020988bb2</id>
		<updated>2018-08-14T20:44:23+08:00</updated>
		<summary type="html"><![CDATA[<p>最近對於自己個人用的工具有些想法，主要也是受到這些年工作的影響。在資訊這行業永遠有學不完的東西，這幾年也是學了很多新奇的東西，但也是因為這樣個人的工具也就成長有限。</p>
<p>所以近期（其實已經開始了）會對於 <code>Github</code> 上的專案做些調整，目前頃向於將多的專案合而為一，然後再來重構有跟工具關聯的作品。</p>
<p>目前計畫如下。</p>
<!--more-->
<h2>進一步完成框架</h2>
<p><code>Oni</code> 是我在四年前寫的 <code>PHP Framework</code>，用這個專案為基底整合 <code>PHP CLI</code> 開發工具 <code>NanoCLI</code>、<code>REST</code> 風格的 <code>URL Router</code> 組件 <code>MessRouter</code> 以及其他的小工具，並且借鑿一些使用其他框架的經驗，整合成一個完整並適用於開發 <code>CLI</code> 與 <code>Web</code> 的框架。</p>
<h2>樣式抽離與重構</h2>
<p><code>Pointless</code> 是我一直用來寫文章的工具，從 <code>2012</code> 開發至今並沒有太大改動，所以有些痛點需要解決。在這幾年間前端的技術進步神速，所以需要將原本架構無法做到的功能交由現代工具整合。</p>
<p>先將原本的樣式從專案中抽離，獨立成單一專案，再來引入 <code>Oni</code> 重構及前端工具協助開發。另外因應樣式重構，<code>Pointless</code> 同樣也會使用 <code>Oni</code> 進行重構，不管是指令本身或者是頁面產生流程也好。</p>
<h2>部落格改版</h2>
<p>最後，前面做了這麼多繁雜的事情目的就只有一個 — 就是部落格改版。讓部落格本身更現代化並完整支援手機樣式。在工作中做了這麼多支援手機樣式的網站，但自己的部落格卻不支援，真的是很神奇。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[魔物獵人配裝計算機使用說明]]></title>
		<link href="https://scar.tw/article/2018/05/02/mhw-calculator-readme/" />
		<id>urn:uuid:ef117fcb-b214-279f-449a-c99f71175221</id>
		<updated>2018-05-02T19:10:58+08:00</updated>
		<summary type="html"><![CDATA[<p>基於現有工具不符合需求及最近有點時間，所以花了點時間寫了這個<a href="https://scar.tw/MHWCalculator">計算機</a>。</p>
<ul>
<li><a href="https://scar.tw/MHWCalculator">配裝計算機連結</a></li>
</ul>
<h2>主要功能</h2>
<ul>
<li>自動配裝</li>
<li>裝備調整</li>
<li>人物狀態</li>
<li>期望值計算</li>
<li>裝備分享</li>
</ul>
<!--more-->
<h2>使用說明</h2>
<p>計算機使用網頁開發，使用瀏覽器即可使用。</p>
<p><img src="/images/mhw-calculator-readme/000.jpg" alt="計算機全貌" /></p>
<h3>搜尋條件添加</h3>
<p>可以選擇你所需求的套裝效果及技能效果，添加完成後即可使用搜尋功能找出適合的配裝，使用 <i class="fa fa-minus"></i> 、 <i class="fa fa-plus"></i> 與 <i class="fa fa-times"></i> 調整套裝需求、技能等級及刪除。點選上方的 <i class="fa fa-refresh"></i> 可以清空技能。</p>
<p>搜尋的速度與搜尋的條件以及使用的設備有關。</p>
<p><img src="/images/mhw-calculator-readme/001.jpg" alt="需求條件" /></p>
<p>最上方的輸入區塊可以輸入相關的關鍵字，下方則會即時顯示內容。使用 <i class="fa fa-plus"></i> 及 <i class="fa fa-minus"></i> 新增刪除套裝或技能，<i class="fa fa-times"></i> 離開界面。</p>
<p><img src="/images/mhw-calculator-readme/002.jpg" alt="套裝選擇" />
<img src="/images/mhw-calculator-readme/003.jpg" alt="技能選擇" /></p>
<h3>候選裝備使用</h3>
<p>在這個區塊會顯示所有的候選裝備，最多列出25項，排列順序依照裝備數量及防禦力排序。</p>
<p>在備選方塊中使用 <i class="fa fa-check"></i> 實裝到已選裝備，並且裝飾珠也會自動填入相對應的插槽中。</p>
<p><img src="/images/mhw-calculator-readme/004.jpg" alt="候選裝備" /></p>
<h3>裝備操作</h3>
<p>在這個區塊中可以模擬在遊戲中的裝備穿脫，其中包含武器、頭、身、腰、腿、護石以及客製強化和鑲嵌槽。</p>
<p>在方塊中的 <i class="fa fa-lock"></i> 、 <i class="fa fa-unlock-alt"></i> 可以將已選擇好的裝備鎖定並加入配裝的流程中，在這個部位就是使用此裝備， <i class="fa fa-times"></i> 可以刪除裝備，而上方的 <i class="fa fa-refresh"></i> 可以清空已選裝備。</p>
<p><img src="/images/mhw-calculator-readme/005.jpg" alt="已選裝備" /></p>
<p>點選武器方塊的標題可以選擇武器，這邊會列出所有衍生武器的最後一階段，這邊只會列出基本數值，其餘像是屬性瓶、榴彈瓶、音色、瓶及彈藥將不會顯示。</p>
<p><img src="/images/mhw-calculator-readme/006.jpg" alt="武器選擇" /></p>
<p>點選強化的內容框，可選擇客製強化，強化的次數與武器稀有度有關。</p>
<p><img src="/images/mhw-calculator-readme/007.jpg" alt="強化選擇" /></p>
<p>點選鑲嵌的內容框，可選擇裝飾珠，可裝備的裝飾珠根據鑲嵌槽的大小有關。</p>
<p><img src="/images/mhw-calculator-readme/008.jpg" alt="鑲嵌選擇" /></p>
<p>點選頭、身、手、腰及腿方塊標題可選擇相對應部位裝備，在這邊所顯示的防禦力則是強化後的最終防禦力。</p>
<p><img src="/images/mhw-calculator-readme/009.jpg" alt="護甲選擇" /></p>
<p>點選護石方塊標題可選擇護石。</p>
<p><img src="/images/mhw-calculator-readme/010.jpg" alt="護石選擇" /></p>
<h3>人物狀態及期望值</h3>
<p>已選裝備會反應在人物狀態上，模擬在遊戲中的數值。</p>
<p><img src="/images/mhw-calculator-readme/011.jpg" alt="人物狀態" /></p>
<p>在下方技能的區域中有個 <i class="fa fa-eye"></i> 、 <i class="fa fa-eye-slash"></i> 圖示，代表著此項技能為被動技能，按下它將會反應或關閉技能效果在人物狀態上。</p>
<p><img src="/images/mhw-calculator-readme/012.jpg" alt="技能區塊" /></p>
<p>最下方額外資訊將會顯示此套裝備的期望值，另外可輸入四種屬性得知額外增加的期望值。</p>
<p>關於期望值的計算公式，是透過各網站情報以及經由遊戲中推敲而來，準確度不一定百分之百，但可供參考。</p>
<p><img src="/images/mhw-calculator-readme/013.jpg" alt="期望值區塊" /></p>
<h3>分享裝備</h3>
<p>直接將網址複製下來即可分享，目前沒有短網誌轉換功能，如有需要可使用其它現有服務。</p>
<h2>開發、使用問題及意見回報</h2>
<p>如果有任何的開發及使用問題可以在文章底下或者是到 <code>巴哈</code> 、 <code>PTT</code> 留言甚至是到 <code>Github</code> 開 <code>Issue</code> 或送 <code>PR (Pull Request)</code> 給我都行。</p>
<ul>
<li><a href="https://scar.tw/MHWCalculator">配裝計算機連結</a></li>
<li><a href="https://github.com/scarwu/MHWCalculator">Github</a></li>
<li><a href="https://github.com/scarwu/MHWCalculator/issues">Github Issues</a></li>
<li><a href="https://forum.gamer.com.tw/C.php?bsn=5786&amp;snA=143767">巴哈姆特</a></li>
<li><a href="https://www.ptt.cc/man/MH/D81D/DC26/M.1525516049.A.7FC.html">PTT</a></li>
</ul>
<hr />
<h4>20180504 更新</h4>
<ul>
<li>修正杜賓α插槽遺漏問題</li>
<li>新增蒼星之將套裝及武器</li>
<li>備選套裝可調整顯示筆數</li>
<li>技能界面將不再出現只有套裝效果能達成的技能</li>
</ul>
<h4>20180509 更新</h4>
<ul>
<li>新增絢輝龍 R7/R8 武器</li>
<li>更新武器選擇界面</li>
<li>已選裝備新增列表功能，可 儲存/讀取 裝備組</li>
<li>優化搜尋演算法</li>
</ul>
<h4>20180602 更新</h4>
<ul>
<li>新增炎妃龍裝備</li>
<li>可以在裝備選擇界面排除裝備，排除的裝備將不會加入演算法計算</li>
</ul>
<h4>20180626 更新</h4>
<ul>
<li>新增麒麟γ及烏德爾γ套裝</li>
<li>補完炎妃龍武器斬位</li>
</ul>
<h4>20180825 更新</h4>
<ul>
<li>新增潛水夫及獨角仙后裝備</li>
<li>新增貝希摩斯裝備及武器</li>
</ul>
<h4>20180904 更新</h4>
<ul>
<li>新增帝王γ及鋼龍γ套裝</li>
</ul>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[2017 年末近況]]></title>
		<link href="https://scar.tw/article/2017/11/26/about-late-of-2017/" />
		<id>urn:uuid:7b190959-4598-181d-9983-420bd0923c6c</id>
		<updated>2017-11-26T02:51:07+08:00</updated>
		<summary type="html"><![CDATA[<p>都要年末了，今年的發文也只有年初的一篇文章而已，自從出工作後發文就銳減了，明明很想說點什麼，但卻又沒發文章的動力。</p>
<p>所以只好把最近一些想說的濃縮在這一篇裡。</p>
<!--more-->
<h2>重型機車</h2>
<p>是的，今年是使用重型機車通勤的第三年。在這之前也騎了 <code>125cc</code> 總共六年的時間，自從出了一場小車禍後就在想有什麼更安全卻又一樣方便的通勤方式，我想我得出了一般台灣人難以接受的答案－重型機車。</p>
<p>在台灣扭曲且奇葩的法規之下，這的確是個答案，能夠行駛內側車道且能夠正常左轉，另外在動力與制動力的性能上相較 <code>125cc</code> 好上許多。另外在新竹這種風大的地方將近兩百公斤的車重能夠對於騎乘的安定度帶來大幅的提昇。</p>
<p>你問，為什麼不是買台車開？如果你的問題且唯一答案是這個，那可能要檢視一下自己的觀念及想法是否過於陳舊及僵固。說穿了不管是小客車或是重型機車終究只是交通工具，根據自身的情況選擇合適的交通工具這是一個值得思考的問題。</p>
<p>最重要的是台灣的交通真的太糟糕了，真的必須重構。</p>
<h2>攝影相關</h2>
<p>前陣子從我爸那邊接收了一台 <code>Pentax MX</code> 底片機並附上鏡頭 <code>SMC Pentax-M 50mm F1.4</code>，目前機身正在維修中就快要修好了就缺幾樣材料而已，那鏡頭的話就是已經送洗回來了，不過中間的膠合鏡片變質嚴重霧化，我想應該找個時間自己處理一下。</p>
<p>其實在高中以來就一直有在摸 <code>DSLR</code>，但並不是說非常的專業，因為都是隨拍居多另外沒錢所以人生中第一台購買的相機是 <code>Ricoh Caplio R7</code> 一台隨身數位相機。這次終於買下了 <code>Sony A7 II</code> 這台微型單眼，因為摸過了多台 <code>DSLR</code> 所以我知道那個體積跟重量是我無法接受的，少了反射鏡機構就獲得了重量上的減輕以及超短的鏡後距離，能夠輕易轉接其它接口的鏡頭，例如上面提到的 <code>SMC Pentax-M 50mm F1.4</code>。</p>
<p>但轉接一般來說還是有缺點，通常都是電子轉接環的支援度不足或是轉接環完全沒有電子接點無法提供機身鏡頭資訊且只能手動對焦，但這影響不大，純手動鏡對我來說具有相當的樂趣。所以在之後鏡頭的選擇上則是原生鏡頭以及轉接手動鏡這兩個選項，中間那個半殘的電子轉接環就直接捨去。</p>
<p>另外，如果有機會的話應該會再把 <code>Ricoh Caplio R7</code> 換成 <code>Ricoh GR II</code>，有台輕便且強大的隨身機跟單眼搭配當然是最好。</p>
<h2>Pointless 專案</h2>
<p>說實在的已經很久沒有在繼續開發了，不過這幾年間還是有改版一次，最近有個新想法，想把原本做在　<code>InkDrop</code> 這個難產專案裡面的 <code>GUI</code> 直接整合在 <code>Pointless</code> 裡。因為在這幾年自己的使用下來，在 <code>Command Line</code> 的模式下還是有一點彆扭，在多數情況下如果有個網頁介面也方便許多。</p>
<p>在這幾年間靜態部落格專案真的非常多，我還是繼續作為一個興趣開發，雖然不是使用很新潮的語言為基底，但目標還是簡單易用，重點還是自己有寫文章的需求。</p>
<h2>網誌</h2>
<p>前陣子，仔細算了一下應該有三十幾篇文章沒有寫，這個數字快要是我的落格發文的一半以上。當然要把想法寫出來很難，要能夠條理把想法寫出來更難。</p>
<p>我也不是很希望自己的文章過於簡短，因為那樣跟寫微網誌沒差多少，也更不希望靠著許多篇簡短的文章來衝流量。既然都是部落格了當然文章本身不能太隨便。</p>
<p>希望惰性不會主宰一切。</p>]]></summary>
	</entry>
</feed>