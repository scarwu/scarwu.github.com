<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle><![CDATA[< IS >]]></subtitle>
	<link href="https://scar.tw/atom.xml" rel="self" />
	<link href="https://scar.tw/" />
	<id>urn:uuid:4d418d05-9f8f-0741-8939-1476077aab63</id>
	<updated>2018-12-17T17:50:44+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>https://scar.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[GANSS 高斯 GM 108D 開箱]]></title>
		<link href="https://scar.tw/article/2018/12/16/ganss-gm-108d-unboxing/" />
		<id>urn:uuid:6f6f47b0-9e34-e0e8-b4a5-db1526bcfd71</id>
		<updated>2018-12-17T17:50:33+08:00</updated>
		<summary type="html"><![CDATA[<p>這是個意料之外的開箱，沒想到會在這次的鍵盤趴上抽到鍵盤，默默地參加了這麼多年的鍵盤趴，在這裡感謝老貓每年舉辦的活動每年都很熱鬧。</p>
<p>先來說一下我平常用得鍵盤，一把是多年前開箱過的 <a href="/article/2015/01/09/happy-hacking-keyboard-pro2-unboxing/">HHKB Professional 2</a> 用於工作，作為一個長時間用鍵盤的工程師保護手腕很重要；而另外一把是自己組裝的 <code>60%</code> 無刻青軸並使用 <code>GH60</code> 編寫成 <code>HHKB Layout</code> 作為一般用途使用，所以我已經很久沒用正常配置的鍵盤了。</p>
<p>下面就來介紹抽到的鍵盤。</p>
<!--more-->
<h2>外盒</h2>
<p>這是把來自對岸有著 <code>Type-C</code> 有線及藍牙無線雙模式的 <code>100%</code> 鍵盤，外盒的印刷非常的簡潔，雖然在外盒上有點損傷，但不影響內容物。</p>
<p><img src="/images/ganss-gm-108d-unboxing/000.jpg" alt="正面" /></p>
<p>品牌與系列 Logo。</p>
<p><img src="/images/ganss-gm-108d-unboxing/001.jpg" alt="高斯 Logo" /></p>
<p><img src="/images/ganss-gm-108d-unboxing/002.jpg" alt="系列 Logo" /></p>
<p>直接告訴你是使用 Cherry MX 軸。</p>
<p><img src="/images/ganss-gm-108d-unboxing/003.jpg" alt="使用 Cherry 軸" /></p>
<h2>內容物</h2>
<p><img src="/images/ganss-gm-108d-unboxing/010.jpg" alt="簡潔的包裝" /></p>
<p>附件有說明書、<code>Type-C</code> 傳輸線、拔鍵器以及磁吸式的腳架。</p>
<p><img src="/images/ganss-gm-108d-unboxing/011.jpg" alt="說明書與配件" /></p>
<p>鍵盤本體以及附贈的透明上蓋，附贈的上蓋跟 <code>FILCO</code> 的上蓋比起來薄且軟很多。</p>
<p><img src="/images/ganss-gm-108d-unboxing/012.jpg" alt="鍵盤本體" /></p>
<h2>鍵盤配置</h2>
<p>作為一把 <code>100%</code> 的鍵盤，在鍵帽的配色上很復古協調並且使用 <code>PBT</code> 材質並使用熱昇華處理質感很不錯，而在 <code>Layout</code> 配置上很一般，不過在右上角有額外的四顆快捷鍵。</p>
<p><img src="/images/ganss-gm-108d-unboxing/020.jpg" alt="輸入區" /></p>
<p><img src="/images/ganss-gm-108d-unboxing/021.jpg" alt="功能區" /></p>
<p>整隻鍵盤都使用 <code>Cherry MX 紅軸</code>，另外長軸的部分是使用衛星軸。</p>
<p><img src="/images/ganss-gm-108d-unboxing/022.jpg" alt="使用 Cherry 紅軸" /></p>
<p>指示燈在切換無線模式後會亮起。</p>
<p><img src="/images/ganss-gm-108d-unboxing/023.jpg" alt="無線指示燈號" /></p>
<p>在鍵盤的右下角有一個低調的 Logo。</p>
<p><img src="/images/ganss-gm-108d-unboxing/024.jpg" alt="鍵盤上的 Logo" /></p>
<h2>鍵盤底部</h2>
<p>底部非常的乾淨。</p>
<p><img src="/images/ganss-gm-108d-unboxing/030.jpg" alt="底部" /></p>
<p>腳墊以及線槽。</p>
<p><img src="/images/ganss-gm-108d-unboxing/031.jpg" alt="軟墊" /></p>
<p>無線模式的開關，在有線模式的 USB 供電下可以關閉。</p>
<p><img src="/images/ganss-gm-108d-unboxing/032.jpg" alt="無線開關" /></p>
<p>鍵盤無線模式使用兩顆 AAA 電池供電，另外要注意的是電池蓋非常的鬆，很容易開啟也意味著容易不見，如果有攜帶鍵盤的需求需要注意一下。</p>
<p><img src="/images/ganss-gm-108d-unboxing/033.jpg" alt="電池槽" /></p>
<p><img src="/images/ganss-gm-108d-unboxing/034.jpg" alt="使用 AAA 電池" /></p>
<p>鍵盤上也有內建 USB Hub 的功能，分別在鍵盤本體的兩側各有一個 USB 的插孔。</p>
<p><img src="/images/ganss-gm-108d-unboxing/035.jpg" alt="左方 USB Hub" /></p>
<p><img src="/images/ganss-gm-108d-unboxing/036.jpg" alt="右方 USB Hub" /></p>
<h2>傳輸線</h2>
<p>本體使用 <code>USB Type-C</code> 不是以往使用的 <code>Mini USB</code> 作為有線連接，近年也許多鍵盤開始改用 <code>USB Type-C</code>。</p>
<p><img src="/images/ganss-gm-108d-unboxing/040.jpg" alt="使用 USB Type-C" /></p>
<p>這裡有點小問題，隨附的傳輸線有做出一個角度，應該是要配合左右方線槽的方向，但如果要從中間拉線的話，線材與鍵盤間會有輕微的物理干涉，也因為如此非常不容易插拔。</p>
<p><img src="/images/ganss-gm-108d-unboxing/041.jpg" alt="使用隨附傳輸線" /></p>
<p><img src="/images/ganss-gm-108d-unboxing/042.jpg" alt="使用隨附傳輸線" /></p>
<p>在這邊我就另外使用我擁有的其它 <code>Type-C</code> 線材來連接，使用 <code>Apple</code> 的 <code>Type-C</code> 傳輸線沒問題，但使用 <code>Sony</code> 手機附贈的 <code>Type-C</code> 傳輸線就出事了，這個線槽開得不夠大會卡線頭。</p>
<p><img src="/images/ganss-gm-108d-unboxing/043.jpg" alt="使用 Apple 傳輸線" /></p>
<p><img src="/images/ganss-gm-108d-unboxing/044.jpg" alt="使用 Sony 傳輸線" /></p>
<h2>腳架</h2>
<p>鍵盤本體是沒有腳架可以調整高度的，如果要調整鍵盤的高度需要使用附贈的磁吸式腳架，它有分為高、矮兩種高度。</p>
<p><img src="/images/ganss-gm-108d-unboxing/050.jpg" alt="隨附腳架" /></p>
<p>沒有使用腳架的話，鍵盤本體就有一定的角度了。</p>
<p><img src="/images/ganss-gm-108d-unboxing/051.jpg" alt="無腳架" /></p>
<p>加上矮的腳架。</p>
<p><img src="/images/ganss-gm-108d-unboxing/052.jpg" alt="使用矮腳架" /></p>
<p>換成高的腳架。</p>
<p><img src="/images/ganss-gm-108d-unboxing/053.jpg" alt="使用高腳架" /></p>
<p>還是不夠？就全上了吧！</p>
<p><img src="/images/ganss-gm-108d-unboxing/054.jpg" alt="同時使用全部腳架" /></p>
<h2>個人心得</h2>
<p>它拿起來的重量很接近我另外一把 <code>FILCO Majestouch 2 NINJA</code>，但是打起來跟我另外一把紅軸的 <code>CM Storm Quick Fire Rapid</code> 不太一樣，打起來的聲音比較清脆。對於已經使用習慣 <code>HHKB</code> 的我來說對於一般的鍵盤配列用起來會非常不習慣。</p>
<p>以無線模式來說，對於不希望桌面太雜亂的人來說很有用的，但是如果是因為它擁有無線模式需要攜帶的人來說它就重了點，並竟是 <code>100%</code> 鍵盤需要攜帶還是推薦 <code>60%</code> 鍵盤。</p>
<p>結論，這是把不錯的鍵盤但不適合我。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[終於換部落格樣式了]]></title>
		<link href="https://scar.tw/article/2018/11/17/finally-i-change-blog-theme/" />
		<id>urn:uuid:979ceee5-bc1e-0825-20d3-68bb48625200</id>
		<updated>2018-11-19T16:12:42+08:00</updated>
		<summary type="html"><![CDATA[<p>在此紀念這歷史性的一刻，算一算長久來使用的樣式也有個五年多了，想當初這個樣式是我在 <code>Pointless</code> 開發初期的時候設計的我將它命名為 <code>Unique</code>，目的是讓它成為成為獨一無二的樣式(雖然後來還是開源了，不過我想應該也沒人用)。</p>
<p>而最早為 <code>Pointless</code> 開發的樣式我稱為 <code>Classic</code> 但說穿了其實就是仿照 <code>Wordpress</code> 的預設樣式，所以稱為 &quot;經典&quot;，現在這個樣式稱它為 <code>Nex</code> 意味著下一個世代，我將許多元素捨去或將其簡化，但這只是外觀而重要的是背後的運作也更符合現代。</p>
<!--more-->
<h2>樣式們</h2>
<p>所有的樣式都有開源出來，這是傳統。</p>
<ul>
<li><a href="https://github.com/scarwu/PointlessTheme-Classic">Classic</a></li>
<li><a href="https://github.com/scarwu/PointlessTheme-Unique">Unique</a></li>
<li><a href="https://github.com/scarwu/PointlessTheme-Nex">Nex</a></li>
</ul>
<h2>後記</h2>
<p>因為加了 <code>SSR</code>、<code>RWD</code> 等...，所以 <code>Nex</code> 這個樣板還在測試中，在 18 年尾巴的現在，明明工作中都用很熟的東西最後才用在自己身上，真的是意料之外啊。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[套件版號與字元符號的意義]]></title>
		<link href="https://scar.tw/article/2018/11/16/version-and-symbol-s-meaning/" />
		<id>urn:uuid:7817be26-4d02-0ef7-4eb1-7a62a0f0d98b</id>
		<updated>2018-11-18T21:49:16+08:00</updated>
		<summary type="html"><![CDATA[<p>早在五、六年前因為各種套件工具的釋出，用來輔助開發專案的套件也越來越多。</p>
<p>對於套件開發者而言，要讓每次改版所附加的版號更有意義也是很頭大的，而對於使用套件的人來說更新套件，更新到太新的套件版本不小心讓專案爆炸也是很頭大的。</p>
<p>所以有些東西就這樣誕生了。</p>
<!--more-->
<h2>版號的意義</h2>
<p><a href="https://semver.org/">SemVer</a></p>
<p>對於撰寫套件的人這個規範就很重要了，它規範了版號擁有三層數字以及後缀詞的用法，格式如下：</p>
<pre><code>major.minor.patch-metadata</code></pre>
<p><code>major</code> 作為套件的主版號，各版號間的功能並不相容。</p>
<p><code>minor</code> 次版號，當有功能被實作時並且相容於前一版。</p>
<p><code>patch</code> 修訂號，通常用於錯誤修正。</p>
<p><code>metadata</code> 後缀詞，通常用來敘述版本，可不使用。</p>
<h2>符號的意義</h2>
<p>對於使用套件的人來說，這個就很重要了，前面說到的各種套件管理工具釋出的年代，其中最有名的工具就是 <code>NPM</code> 了，在那個 <code>node.js</code> 很紅，紅到就算是不穩定也還是硬拿來寫我碩士論文的年代。</p>
<p>通常我們會看到這樣的版本敘述：</p>
<pre><code>^1.24.5
~2.4</code></pre>
<p>這樣的符號常用的有以下幾種 <code>*</code>、<code>^</code> 及 <code>~</code>。</p>
<p><code>*</code> (widecard) 表示所以版本都吃，所以後面不用加上任何版號。
<code>^</code> (caret) 表示固定住主版號 <code>major</code> ，只更新有向下相容的新功能最新版本。
<code>~</code> (tilde) 表示固定住主版號 <code>major</code> 及次版號 <code>minor</code>，只更新錯誤修正個新版本。</p>
<p>然後還有像是 <code>&gt;</code> 及 <code>&lt;</code> 這類數學符號的用法，如果所使用套件的依賴關聯性很嚴格可能會用到，用來限制版本範圍。</p>
<h2>最後</h2>
<p>雖然上面有明確的規範了，但照著規範走還是有機會爆炸的，人出來走跳總是要還...像是最近更新修訂號就炸的 <code>React 16.6.2</code> XD</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[HHKB on MacBook]]></title>
		<link href="https://scar.tw/article/2018/10/01/hkkb-on-macbook/" />
		<id>urn:uuid:6d8b5719-ae37-2153-6e50-011c935ed7f8</id>
		<updated>2018-10-01T18:57:23+08:00</updated>
		<summary type="html"><![CDATA[<p>最近因為工作需求把開發平台從 <code>Linux</code> 換成了 <code>macOS</code>，當然連周邊設備也一起搬過來了，遇到的最大問題就是快捷鍵不同的問題。</p>
<p>其中 <code>macOS</code> 按鍵設定在 <code>HHKB</code> 上的按鍵對應完全不同，所以要做相對應的變更。</p>
<!--more-->
<h2>HHKB Switch</h2>
<p>在硬體的開關從原本的 <code>101110</code> 改成了 <code>011111</code> 用來對應 <code>MacBook</code> 的快捷鍵，這部分並不影響使用。</p>
<h2>macOS Keyboard Mapping for HHKB</h2>
<p>接下來修改鍵盤的對應，修改內容如下：</p>
<ul>
<li>Control -&gt; Commnad</li>
<li>Option -&gt; Control</li>
<li>Commnad -&gt; Option</li>
</ul>
<p><img src="/images/hhkb-on-macbook/000.png" alt="對應設定" /></p>
<p>最後可以用 <a href="http://keyboardchecker.com/">Keyboard Checker</a> 來測試一下按鍵對應。</p>
<h2>同場加映 Sublime Text</h2>
<p>如果你很習慣使用 <code>Home</code> 跟 <code>End</code> 來移動或選取的話抱歉這在 <code>macOS</code> 上是失效的。</p>
<p>所以要在 <code>Sublime Text</code> 的 <code>Key Binding</code> 中加料像是下面那樣，這樣移動游標或是選取程式碼都會正常了就像原本習慣的那樣。</p>
<pre><code class="language-json">[
    {
        "keys": [
            "home"
        ], 
        "command": "move_to", 
        "args": {
            "to": "bol", 
            "extend": false
        }
    },
    {
        "keys": [
            "end"
        ], 
        "command": "move_to", 
        "args": {
            "to": "eol", 
            "extend": false
        }
    },
    {
        "keys": [
            "shift+home"
        ], 
        "command": "move_to", 
        "args": {
            "to": "bol", 
            "extend": true
        }
    },
    {
        "keys": [
            "shift+end"
        ], 
        "command": "move_to", 
        "args": {
            "to": "eol", 
            "extend": true
        }
    }
]</code></pre>
<h2>完美？</h2>
<p>不對！<code>macOS</code> 獨一無二的快捷鍵設定，完全跟 <code>Linux</code> 不同還是需要習慣。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[使用 Docker 打造多版本 PHP 開發環境]]></title>
		<link href="https://scar.tw/article/2018/08/19/using-docker-make-multiple-version-php-envs/" />
		<id>urn:uuid:6bbadac1-7a9f-cc62-5cae-1fd6dc2996e4</id>
		<updated>2018-11-16T22:39:42+08:00</updated>
		<summary type="html"><![CDATA[<p>過去在這幾年間 <code>PHP</code> 終於從 <code>5.x</code> 升版到了 <code>7.x</code>，所以公司內的新專案也因應改版也順勢使用新版本，那原本的專案就保持舊版本或是之後有計畫升級新版本。</p>
<p>但這樣就會造成環境混雜的問題，所以同時可能會有 <code>5.4</code>、<code>5.6</code> 或是 <code>7.0</code> 的專案需要開發。</p>
<p>而在一般的開發環境之下，每台電腦就只能安裝單一版本的 <code>PHP</code>，就算有機會安裝多個環境也有機會造成環境污染，以及無法快速切換版本。</p>
<p>所以利用 <code>Container</code> 的方式將不同的環境打包到個別的 <code>Image</code> 獨立運作，再利用 <code>PHP-FPM</code> 可以聆聽 <code>socket</code> 或是 <code>port</code> 的特性，以及 <code>Nginx</code> 的 <code>Proxy</code> 將請求送到不同的環境去執行。</p>
<!--more-->
<h2>撰寫 Dockerfile</h2>
<p>這邊我們使用 <code>Alpine Linux</code> 作為 <code>Image</code> 的基底，再安裝上我們所需要的套件，下面就使用 <code>Nginx</code> 及 <code>PHP</code> 為範例，不同的 <code>PHP</code> 版本只需要透過修改 <code>Alpine Linux</code> 的版本來調整。</p>
<h3>Nginx 1.14</h3>
<pre><code class="language-dockerfile">FROM alpine:3.8
MAINTAINER Scar Wu &lt;xneriscool@gmail.com&gt;
WORKDIR /build

RUN VERSION="1.14" \
    &amp;&amp; NEED_APK="nginx&gt;$VERSION" \
    &amp;&amp; apk --update add $NEED_APK

RUN mkdir /volume \
    &amp;&amp; mkdir /volume/log \
    &amp;&amp; mkdir /volume/data \
    &amp;&amp; mkdir /volume/config \

    &amp;&amp; mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak \
    &amp;&amp; ln -s /volume/config/nginx.conf /etc/nginx/nginx.conf

VOLUME ["/volume/config", "/volume/data", "/volume/log"]

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

EXPOSE 80/tcp
EXPOSE 443/tcp

CMD /usr/sbin/nginx -g "daemon off;"</code></pre>
<h3>PHP 5.6</h3>
<pre><code class="language-dockerfile">FROM alpine:3.8
MAINTAINER Scar Wu &lt;xneriscool@gmail.com&gt;
WORKDIR /build

RUN VERSION="5.6" \
    &amp;&amp; NEED_APK="php5&gt;$VERSION php5-fpm&gt;$VERSION" \
    &amp;&amp; apk --update add $NEED_APK

ENV PHP_DIR /etc/php5

RUN mkdir /volume \
    &amp;&amp; mkdir /volume/log \
    &amp;&amp; mkdir /volume/data \
    &amp;&amp; mkdir /volume/config \

    &amp;&amp; mv $PHP_DIR/php.ini $PHP_DIR/php.ini.bak \
    &amp;&amp; ln -s /volume/config/php.ini $PHP_DIR/php.ini \

    &amp;&amp; mv $PHP_DIR/php-fpm.conf $PHP_DIR/php-fpm.conf.bak \
    &amp;&amp; ln -s /volume/config/php-fpm.conf $PHP_DIR/php-fpm.conf

VOLUME ["/volume/config", "/volume/data", "/volume/log"]

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

RUN addgroup nginx \
    &amp;&amp; adduser -D nginx -G nginx

EXPOSE 9000/tcp

CMD /usr/bin/php-fpm5 --nodaemonize</code></pre>
<h3>PHP 7.2</h3>
<pre><code class="language-dockerfile">FROM alpine:3.8
MAINTAINER Scar Wu &lt;xneriscool@gmail.com&gt;
WORKDIR /build

RUN VERSION="7.2" \
    &amp;&amp; NEED_APK="php7&gt;$VERSION php7-fpm&gt;$VERSION" \
    &amp;&amp; apk --update add $NEED_APK

ENV PHP_DIR /etc/php7

RUN mkdir /volume \
    &amp;&amp; mkdir /volume/log \
    &amp;&amp; mkdir /volume/data \
    &amp;&amp; mkdir /volume/config \

    &amp;&amp; mv $PHP_DIR/php.ini $PHP_DIR/php.ini.bak \
    &amp;&amp; ln -s /volume/config/php.ini $PHP_DIR/php.ini \

    &amp;&amp; mv $PHP_DIR/php-fpm.conf $PHP_DIR/php-fpm.conf.bak \
    &amp;&amp; ln -s /volume/config/php-fpm.conf $PHP_DIR/php-fpm.conf

VOLUME ["/volume/config", "/volume/data", "/volume/log"]

COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]

RUN addgroup nginx \
    &amp;&amp; adduser -D nginx -G nginx

EXPOSE 9000/tcp

CMD /usr/sbin/php-fpm7 --nodaemonize</code></pre>
<h2>調整 Server Config</h2>
<p>在這裡我們需要修改 <code>Nginx</code> 的 <code>FactCGI</code> 傳遞的方式，以及 <code>PHP-FPM</code> 的聆聽模式，<code>Nginx</code> 可以透過判斷 <code>request_uri</code> 的方式指定將不同的請求送到不同的 <code>PHP</code> 的版本。</p>
<p>在這邊的設定檔案不是完整檔，只是表名設定的重點，完整的設定在我的 <code>Github</code> 上有，見下方連結。</p>
<h3>Nginx: www.conf</h3>
<pre><code class="language-nginx">server {
    listen 80;

    root /volume/data;
    index index.html index.htm index.php;

    charset utf-8;
    autoindex off;

    error_page 403 = 404;
    error_page 404 /404.html;

    location ~ /\.ht {
        deny all;
    }

    location / {
        try_files $uri $uri/ /index.php;
    }

    location ~ \.php$ {
        fastcgi_pass PHP-7.2:9000;
        fastcgi_index index.php;
        fastcgi_split_path_info ^(.+\.php)(.*)$;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        if ($request_uri = "/php56") {
            fastcgi_pass PHP-5.6:9000;
        }

        if ($request_uri = "/php72") {
            fastcgi_pass PHP-7.2:9000;
        }
    }
}</code></pre>
<h3>PHP-FPM: pools/main.conf</h3>
<pre><code class="language-ini">[main]
listen = 0.0.0.0:9000</code></pre>
<h2>撰寫 Docker Compose File</h2>
<p>利用 <code>Docker Compose</code> 將環境設定起來，這邊要注意的是將相對應資料夾掛到 <code>Container</code> 中，再來是 <code>external_links</code> 及 <code>depends_on</code> 的關聯設定。</p>
<pre><code class="language-yaml">version: '3'
services:

    nginx:
        image: scarwu/demo-nginx:1.14
        volumes:
            - ./config/Nginx:/volume/config
            - ./data:/volume/data
            - ./log/nginx:/volume/log
        ports:
            - "80:80"
        external_links:
            - "php56:PHP-5.6"
            - "php72:PHP-7.2"
        depends_on:
            - "php56"
            - "php72"
        restart: always

    php56:
        image: scarwu/demo-php:5.6
        volumes:
            - ./config/PHP-5.6:/volume/config
            - ./data:/volume/data
            - ./log/php56:/volume/log
        restart: always

    php72:
        image: scarwu/demo-php:7.2
        volumes:
            - ./config/PHP-7.2:/volume/config
            - ./data:/volume/data
            - ./log/php72:/volume/log
        restart: always</code></pre>
<h2>Source Code</h2>
<p>下面是範例專案，至於要怎樣投入到生產環境那就要看個人的調校了。</p>
<p><a href="https://github.com/scarwu/MultiPHPEnvWithDocker">MultiPHPEnvWithDocker</a></p>]]></summary>
	</entry>
</feed>