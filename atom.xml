<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle>I know that I don't know</subtitle>
	<link href="http://scar.tw/atom.xml" rel="self" />
	<link href="http://scar.tw/" />
	<id>urn:uuid:4d418d05-9f8f-0741-8939-1476077aab63</id>
	<updated>2016-12-02T09:59:14+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>http://scar.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[Sony AS200V 防風對策]]></title>
		<link href="http://scar.tw/article/2016/03/03/sony-as200v-reduce-wind-noise/" />
		<id>urn:uuid:29d9fb7e-641e-202c-cb46-36df003323f6</id>
		<updated>2016-03-03T09:31:55+08:00</updated>
		<summary type="html"><![CDATA[<p>從去年開七月入手 AS200V 後，風切的問題就一直困擾我，有試過在機身的麥克風上加上海綿，但是收音的位置在前方會一直撞風，效果還是很差。</p>
<p>另外有看過網路上有人使用附贈的防水殼去改造，但使用上卻比不上裸機那樣方便，通常我會使用外部電源長時間錄影並且頻繁傳輸檔案，用防水殼就稍嫌礙事。</p>
<p>有想過外接麥克風，但是 AS200V 不像 X1000V 那樣將標準的雲台接孔做在機身上，需要另外使用轉接座才能連接安全帽支架，轉接座就會壓在防水蓋上擋住接麥克風的接孔，無法外接。</p>
<p><strong>BUT!!</strong></p>
<p>有天晚上靈感來了，將該買了材料買一買就開幹了！</p>
<!--more-->
<p>材料清單：</p>
<ul>
<li>3.5mm 插頭</li>
<li>3.5mm 插座</li>
<li>音響線材</li>
<li>領夾式麥克風</li>
<li>粉撲</li>
</ul>
<h2>機身改造</h2>
<p>將保護蓋打開並將機身上的螺絲轉下後就可以把保護蓋拆下了。</p>
<p>因為沒了蓋子所以要另外對線材接口用膠帶貼上做基本處理，只留下 MIC 的接口。</p>
<p>將蓋子去除後，機身跟雲台轉接座之間就騰出大約 2mm 的空間可以塞入線材。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/001.jpg" alt="AS200V Reduce Wind Noise" /></p>
<h2>製作轉接線材</h2>
<p>將電子材料的 3.5mm 接頭額外加工，將接點磨至 2mm 符合騰出的空間，就可以開始焊接了。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/002.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p>這邊要注意的是線材寬度也不能超過 2mm，另外因為接頭的接點都被磨薄了，所以接點跟接點間要特別防止短路的問題，我是另外用遮蓋膠帶去處理。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/003.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p><img src="/images/sony-as200v-reduce-wind-noise/004.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p>最後在另一端焊接上插孔並做絕緣處理就完成了。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/005.jpg" alt="AS200V Reduce Wind Noise" /></p>
<h2>組合</h2>
<p>這邊我選用的外接麥克風是 audio-technica 的 AT9902，因為它剛好可以夾在鼻罩上。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/006.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p>將該接的線接一接，把麥克風放在適合的位置，再將多餘的線塞到帽體內就完成了。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/007.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p><img src="/images/sony-as200v-reduce-wind-noise/008.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p><img src="/images/sony-as200v-reduce-wind-noise/009.jpg" alt="AS200V Reduce Wind Noise" /></p>
<h2>自製防風罩</h2>
<p>外接麥克風首次測試後差點沒吐血，因為是指向性麥克風在安全帽內同樣有風流通，所以風切聲依然嚴重。</p>
<p>最後決定去十元商店買了粉撲盒，將粉撲另外加工成防風罩裝在麥克風上，測試結果收音非常清晰，在比較高速的時候引擎聲也能錄到。</p>
<p><img src="/images/sony-as200v-reduce-wind-noise/010.jpg" alt="AS200V Reduce Wind Noise" /></p>
<p><img src="/images/sony-as200v-reduce-wind-noise/011.jpg" alt="AS200V Reduce Wind Noise" /></p>
<h2>測試影片</h2>
<p>AS200V 內建麥克風</p>
<iframe src="https://www.youtube.com/embed/-snNlAPUZN0" width="560" height="315" frameborder="0" allowfullscreen></iframe>
<p>AS200V 內建麥克風 (加海綿)</p>
<iframe src="https://www.youtube.com/embed/HOaBnsi9Rp8" width="560" height="315" frameborder="0" allowfullscreen></iframe>
<p>AS200V + AT9902</p>
<iframe src="https://www.youtube.com/embed/EGXAc48it74" width="560" height="315" frameborder="0" allowfullscreen></iframe>
<p>AS200V + AT9902 (加防風罩)</p>
<iframe src="https://www.youtube.com/embed/gAJE67qSbIE" width="560" height="315" frameborder="0" allowfullscreen></iframe>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[MariaDB Galera Cluster 10.0 Setting]]></title>
		<link href="http://scar.tw/article/2015/03/11/mariadb-galera-cluster-10-0-setting/" />
		<id>urn:uuid:2368b3d3-8d8d-18e9-153a-888f8d3d01f5</id>
		<updated>2015-03-11T12:37:00+08:00</updated>
		<summary type="html"><![CDATA[<h2>Setting Environment</h2>
<h3>Repository</h3>
<h4>Ubuntu Trusty</h4>
<pre><code class="language-bash">sudo apt-get install software-properties-common
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
sudo add-apt-repository 'deb http://ftp.yz.yamagata-u.ac.jp/pub/dbms/mariadb/repo/10.0/ubuntu trusty main'</code></pre>
<h4>Debian Wheezy</h4>
<pre><code class="language-bash">sudo apt-get install python-software-properties
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
sudo add-apt-repository 'deb http://ftp.yz.yamagata-u.ac.jp/pub/dbms/mariadb/repo/10.0/debian wheezy main'</code></pre>
<!--more-->
<h3>Install MariaDB Galera Cluster</h3>
<pre><code class="language-bash">sudo apt-get update &amp;&amp; sudo apt-get upgrade
sudo apt-get install mariadb-galera-server galera rsync</code></pre>
<h2>Setting Cluster Node</h2>
<h3>Create Cluster User for All Node</h3>
<pre><code class="language-sql">GRANT USAGE ON *.* to CLUSTER_USER@'%' IDENTIFIED BY 'CLUSTER_PASS';
GRANT ALL PRIVILEGES on *.* to CLUSTER_USER@'%';
GRANT USAGE ON *.* to CLUSTER_USER@'localhost' IDENTIFIED BY 'CLUSTER_PASS';
GRANT ALL PRIVILEGES on *.* to CLUSTER_USER@'localhost';</code></pre>
<h3>Stop All Cluster Node</h3>
<pre><code class="language-bash">sudo service mysql stop</code></pre>
<h3>Setting MaraiDB Cluster</h3>
<pre><code class="language-ini">[mysqld]
# Mysql Settings
binlog_format = ROW
default-storage-engine = innodb
innodb_autoinc_lock_mode = 2
query_cache_size = 0
query_cache_type = 0
bind-address = 0.0.0.0

# Galera Settings
wsrep_node_address = "NODE_IP"
wsrep_provider = /usr/lib/galera/libgalera_smm.so
wsrep_cluster_name = "CLUSTER_NAME"
wsrep_cluster_address = "gcomm://OTHER_NODE_IP:4567"
wsrep_sst_auth = CLUSTER_USER:CLUSTER_PASS
wsrep_sst_method = rsync</code></pre>
<h3>Open 3 Ports in Firewall</h3>
<ul>
<li>3306: MariaDB</li>
<li>4444: RSync</li>
<li>4567: Galera Cluster</li>
</ul>
<h3>Start Cluster Node</h3>
<h4>First Cluster Node</h4>
<pre><code class="language-bash">sudo service mysql start --wsrep-new-cluster</code></pre>
<h4>Other Cluster Node</h4>
<pre><code class="language-bash">sudo service mysql start</code></pre>
<h3>Fix Bug</h3>
<p>If you shutdown cluster node with failed, then copy <code>/etc/mysql/debian.cnf</code> from the first node to the other node.</p>
<pre><code class="language-bash">sudo service mysql stop
[FAIL] Stopping MariaDB database server: mysqld failed!</code></pre>
<h2>Finally</h2>
<p>Have Fun!</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Polaroid Cube 開箱與四驅車實拍]]></title>
		<link href="http://scar.tw/article/2015/01/11/polaroid-cube-unboxing-and-mini4wd/" />
		<id>urn:uuid:3bbbdcb6-9f30-c9b6-916c-36cf262eb0eb</id>
		<updated>2015-01-11T02:57:05+08:00</updated>
		<summary type="html"><![CDATA[<p>其實這一篇是遲來的開箱文，事實上我已經入手 <code>Polaroid Cube</code> 一段時間了，去年九月的時候就跟朋友一起在國外預購了，大約兩個月後送達，我買了攝影機本體之外還多買了一個攝影腳架的雲台，朋友則是買防水殼，就我的部份折合台幣外加運費大約是 <code>3.8k</code> 台幣，比現在在台灣上市的價格要便宜，事實上在台灣買比較貴的原因出在配件貴滿多的，而本體價格其實沒差多少。</p>
<p>當初買這個攝影機其實是我想將它安裝在四驅車上，讓它用第一人稱去錄跑道的實況，另外就是它很小放在四驅車上真的很剛好，並不會像 <code>GoPro</code> 旁邊會凸出來或是像行車記錄器那樣過長。</p>
<!--more-->
<h2>實體</h2>
<p>包裝很簡單，就一個透明盒子裝著，而下方則是吸附在金屬板上，沒錯在本體的下方有磁鐵可以任意吸附在金屬表面。</p>
<p><img src="/images/polaroid-cube-and-mini4wd/001.jpg" alt="Polaroid Cube" /></p>
<p><img src="/images/polaroid-cube-and-mini4wd/002.jpg" alt="Polaroid Cube" /></p>
<p>將 <code>Polaroid Cube</code> 放上腳架整個就很小巧，另外他底座是可以拆卸的且可以跟其他配件互通，不過卻很不好拆卸。</p>
<p><img src="/images/polaroid-cube-and-mini4wd/003.jpg" alt="Polaroid Cube" /></p>
<p><img src="/images/polaroid-cube-and-mini4wd/004.jpg" alt="Polaroid Cube" /></p>
<h2>四驅車</h2>
<p>我特別製作了一個車殼可以讓它安裝在上面，下面的金屬板是包裝盒中的一部分，我把它拿來加工，擴孔並導腳讓它可以使用皿型螺絲使底部貼合。</p>
<p><img src="/images/polaroid-cube-and-mini4wd/005.jpg" alt="Polaroid Cube" /></p>
<p>另外為了造型另外將軟殼切了個洞讓 <code>Polaroid Cube</code> 可以穿過去，附帶一提的是因為它本身有廣角所以不會有車殼過高擋住畫面的問題，車殼只會出現在畫面的下方一點的位置。</p>
<p><img src="/images/polaroid-cube-and-mini4wd/006.jpg" alt="Polaroid Cube" /></p>
<h2>實際拍攝</h2>
<p>在我的播放清單中還有其它的影片這邊就先放上一段，因為是用四驅車的視角所以看起來車速會特別的快，如有感覺噁心想吐就多看幾次就會好了。</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/3g-2XQ0g1l8" frameborder="0" allowfullscreen></iframe>
<h2>感謝</h2>
<p>最後在這邊特別感謝新竹快樂堂熱血車友 <a href="https://www.facebook.com/adzg9900">阿臣</a> 贊助了我一盒 <code>ITEM 18613</code>以及一堆零件讓我弄好了這台車。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[HHKB Pro2 開箱]]></title>
		<link href="http://scar.tw/article/2015/01/09/happy-hacking-keyboard-pro2-unboxing/" />
		<id>urn:uuid:8655e668-76df-33a6-dbf5-9ad72a4026c6</id>
		<updated>2015-01-09T23:53:17+08:00</updated>
		<summary type="html"><![CDATA[<p>其實本來沒有打算要買這隻鍵盤的，但近日日幣的走勢實在是太讓人衝動，然後就衝了，原先是請朋友去日本順便幫我帶，不過去了大阪日本橋卻沒有找到，也謝謝他們幫我找。</p>
<p>後來透過朋友介紹代購公司幫我代買，下訂之後大約兩星期就送到了，這樣折合台幣含運費大約七張小朋友，價格真的不是許多人能接受。</p>
<!--more-->
<h2>實照</h2>
<p>盒子就跟我的 <code>CM Storm Quick Fire Rapid 紅軸</code> 差不多大了，拆開之後小很多，我買的是灰色墨刻型號是 <code>PD-KB400D</code> ，沒有買無刻的原因是因為整隻都灰色的不好看...，有點顏色比較好，另外就是實在上墨刻的顏色在視覺上滿低調的。</p>
<p><img src="/images/happy-hacking-keyboard-pro2-unboxing/001.jpg" alt="HHKB Pro2" /></p>
<p><img src="/images/happy-hacking-keyboard-pro2-unboxing/002.jpg" alt="HHKB Pro2" /></p>
<p><img src="/images/happy-hacking-keyboard-pro2-unboxing/003.jpg" alt="HHKB Pro2" /></p>
<p>因為網路上的照片很多，所以就沒有多照了。</p>
<h2>使用</h2>
<p>我將後面的開關設定為 <code>101110</code> ，這樣的 <code>Layout</code> 原本的使用習慣比較相近，實際上使用了幾天，因為還沒有完全熟悉所以開發程式的速度受了一點影響。</p>
<p>但先不管網路上的評論說這隻鍵盤比較適合哪一種的作業系統或這是哪一種的文字編輯器，但在我實際的使用上它的確是隻很特殊的鍵盤，不管是在手感或者是按鍵的編排。</p>
<p>使用上的深刻感受，就非的 <code>Ctrl</code> 及 <code>Fn</code> 鍵莫屬，因為將按鍵上移，在使用組合鍵時小拇指終於不用用很鱉的姿勢去按組合鍵，這樣小拇指也能夠比較放鬆。</p>
<p>另外就是手感，它的段落比較明顯，在使用上感覺比較重手，相較平常工作用的 <code>FILCO Ninja 茶軸</code> 來說，但是按鍵的聲音有比較小聲一點，原本茶軸是是 &quot;卡卡卡&quot; 現在這隻是 &quot;豆豆豆&quot;。</p>
<p>關於保護部份，因為它沒有防塵蓋所以我使用完之後都把它收進抽屜去，雖然日本有專用防塵袋及防塵蓋但也不便宜，得另外再找找看其它替代方案了。</p>
<h2>最後</h2>
<p>因為我這幾天都在用 <code>HHKB Pro2</code>，所以就把原本的鍵盤借給了同事，沒想到他用了兩天就馬上入坑了，但這時候一定要澄清說我只是在推薦好東西。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[MySQL/MariaDB 5.5 Replication Setting]]></title>
		<link href="http://scar.tw/article/2014/11/12/mysql-or-mariadb-5-5-replication-setting/" />
		<id>urn:uuid:0323e681-0995-01d3-b9dc-18c6bd5777a8</id>
		<updated>2014-11-12T11:21:31+08:00</updated>
		<summary type="html"><![CDATA[<p>久違的文章，我竟然長達半年沒有寫文章，最近退伍又很剛好找到工作了。又有一堆雜事可以做，我想之後應該有一堆東西可以紀錄吧。</p>
<p>最近忙著幫公司架設<code>Raid</code>跟備份機制，這邊就紀錄一下<code>MySQL Replication</code>的流程，雖然說是<code>MySQL</code>但是公司實際上是用<code>MariaDB</code>但這不是重點，基本上操作是一樣的。</p>
<p>在<code>Replication</code>的機制上<code>MySQL Server</code>分為<code>Master</code>與<code>Slave</code>，在一般的應用中主要還是用於負載平衡，但在這邊我只是要用於備份。</p>
<!--more-->
<h2>設定 Master 資料庫</h2>
<p>首先先在<code>Master</code>的<code>my.cnf</code>的設定檔案中加上以下設定：</p>
<pre><code class="language-conf"># my.cnf
[mysqld]
server-id=1
log-bin=/path/to/mysql-bin</code></pre>
<p><code>server-id</code>在伺服器中必須是唯一值，數值大小是 1 ~ 2<sup>32</sup>-1，<code>log-bin</code>則是設定<code>Binary Log</code>的路徑。</p>
<p>如果想要針對特定的資料庫做複寫或不要複寫到<code>Slave</code>，可以再另外加上以下的設定。</p>
<pre><code class="language-conf"># 要複寫的
binlog-do-db=db1
binlog-do-db=db2
# 不要複寫的
binlog-ignore-db=db3
binlog-ignore-db=db4</code></pre>
<p>當設定完成之後重新啟動<code>Master</code>。</p>
<pre><code class="language-bash">service mysql restart</code></pre>
<p>接著登入伺服器使用指令<code>SHOW MASTER STATUS</code>觀看<code>Master</code>的狀態。</p>
<pre><code class="language-sql">mysql &gt; SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000008 | 5723     | db1,db2      | db3,db4          |
+------------------+----------+--------------+------------------+</code></pre>
<p>接著為<code>Master</code>加上<code>Slave</code>用來<code>Replication</code>的專用帳號，將<code>USER_NAME</code>、<code>USER_PASS</code>及<code>SLAVE_HOST</code>換成你的資料。</p>
<pre><code class="language-sql">CREATE USER 'USER_NAME'@'SLAVE_HOST' IDENTIFIED BY 'USER_PASS';
GRANT REPLICATION SLAVE ON *.* TO 'USER_NAME'@'SLAVE_HOST';
FLUSH PRIVILEGES;</code></pre>
<p>最後將資料庫的資料匯出，然後傳送到<code>Slave</code>接著下面的<code>Slave</code>資料庫設定步驟。這邊的參數<code>--master-data</code>是匯出時一同匯出<code>Master</code>的資料包含<code>Log file</code>及<code>Log position</code>，而<code>--all-databases</code>是指整個資料庫，其中不包含<code>information_schema</code>及<code>performance_schema</code>但有<code>mysql</code>資料庫。</p>
<pre><code class="language-bash">mysqldump -u root -p --master-data --all-databases &gt; all_db.sql</code></pre>
<h2>設定 Slave 資料庫</h2>
<p>將剛剛的從<code>Master</code>傳送過來的檔案匯入<code>Slave</code>之中，如果不想要將<code>Slave</code>的使用者權限覆蓋過去的話，請將檔案中有關於<code>mysql</code>資料庫的指令移除。</p>
<pre><code class="language-bash">mysql -u root -p &lt; all_db.sql</code></pre>
<p>同樣也是設定將<code>Slave</code>加上<code>server-id</code>設定。</p>
<pre><code class="language-conf"># my.cnf
[mysqld]
server-id=2</code></pre>
<p>設定指定資料庫是否被<code>Master</code>複寫。</p>
<pre><code class="language-conf"># 要複寫的
replicate-do-db=db1
replicate-do-db=db2
# 不要複寫的
replicate-ignore-db=db3
replicate-ignore-db=db4</code></pre>
<p>設定完成後重新啟動<code>Slave</code>。</p>
<pre><code class="language-bash">service mysql restart</code></pre>
<p>然後在登入前先去看剛剛匯入的檔案，找出以下的<code>query</code>，把這邊的<code>Log File</code>跟<code>Log Position</code>記錄下來等一下會用到。</p>
<pre><code class="language-sql">CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.00008', MASTER_LOG_POS=5723;</code></pre>
<p>接著登入<code>Slave</code>，然後用以下指令讓<code>Slave</code>對應到<code>Master</code>，請記得先修改<code>USER_NAME</code>及<code>USER_PASS</code>為剛剛在<code>Master</code>所輸入的帳密，<code>MASTER_HOST</code>為<code>Master</code>的網路位置，最後將<code>LOG_FILE</code>及<code>LOG_POS</code>修改為剛剛所記錄下來的資料。</p>
<pre><code class="language-sql">CHANGE MASTER TO
    MASTER_HOST='MASTER_HOST',
    MASTER_USER='USER_NAME',
    MASTER_PASSWORD='USER_PASS',
    MASTER_PORT=3306,
    MASTER_LOG_FILE='LOG_FILE',
    MASTER_LOG_POS=LOG_POS,
    MASTER_CONNECT_RETRY=10;</code></pre>
<p>接著啟動<code>Slave</code>的<code>Replication</code>機制。</p>
<pre><code class="language-sql">START SLAVE;</code></pre>
<p>最後使用<code>SHOW SLAVE STATUS \G;</code>來觀看<code>Slave</code>的狀態，如果<code>Replication</code>正確的話應該會長下面這樣。</p>
<pre><code class="language-sql">mysql &gt; SHOW SLAVE STATUS \G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: MASTER_HOST
                  Master_User: USER_NAME
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000009
          Read_Master_Log_Pos: 6635
               Relay_Log_File: db1-relay-bin.000002
                Relay_Log_Pos: 156
        Relay_Master_Log_File: mysql-bin.000008
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 90650
              Relay_Log_Space: 6164
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 1</code></pre>
<h2>收工</h2>
<p>說明就到這邊，可以另外在<code>Master</code>更動幾筆資料，看看是否<code>Slave</code>是否也會同樣做動來驗證。</p>]]></summary>
	</entry>
</feed>