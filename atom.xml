<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle>I know that I don't know</subtitle>
	<link href="http://scar.simcz.tw/atom.xml" rel="self" />
	<link href="http://scar.simcz.tw/" />
	<id>urn:uuid:2678fdc5-5c0a-82f6-3383-a3112866cd7f</id>
	<updated>2014-05-11T21:02:27+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>http://scar.simcz.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[HTML中JavaScript的載入問題]]></title>
		<link href="http://scar.simcz.tw/article/2014/05/09/html-javascript-load-problem/" />
		<id>urn:uuid:6403076a-b8ec-f834-6768-80ba3eab263e</id>
		<updated>2014-05-09T00:09:14+08:00</updated>
		<summary type="html"><![CDATA[<h2>前言</h2>

<p>一般在瀏覽器中對於<code>HTML</code>的解析順序是由上而下的，所以在傳統的網頁設計中我們一般都會將<code>&lt;scritp&gt;</code>標籤放置在<code>&lt;head&gt;&lt;/head&gt;</code>中，這樣能確保<code>JavaScript</code>盡早被執行到。</p>

<p>但是隨著近年來網頁不再只是網頁，而漸漸成為了<code>Web Application</code>，因為如此所以使用到的<code>JavaScript</code>就變得越來越大，這時候<code>JavaScript</code>的載入就是個問題。</p>

<!--more-->

<h2>阻塞 (Blocking)</h2>

<p>在傳統的瀏覽器中，每當解析到了<code>&lt;script&gt;</code>標籤時瀏覽器的繪製就會停頓下來，然後去下載並執行<code>JavaScript</code>中的內容，過多的<code>JavaScript</code>內容會造成阻塞問題，便是瀏覽器停頓一段時間等待<code>JavaScript</code>都執行完畢後，才開始繪製剩下的網頁內容。</p>

<p>上面提到，一般會將<code>&lt;script&gt;</code>標前放置在<code>&lt;head&gt;&lt;/head&gt;</code>中，這會造成網頁在一片空白的情況下停頓許久。</p>

<pre><code class="html">&lt;html&gt;
    &lt;head&gt;
        &lt;script&gt;&lt;/script&gt;
        &lt;script&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--something--&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>所以現在會建議將<code>&lt;script&gt;</code>放置在<code>&lt;body&gt;&lt;/body&gt;</code>的尾端，等待瀏覽器將大部分的內容都繪製出來之後再去執行<code>JavaScript</code>，這樣比較不會造成使用者的觀感不佳。</p>

<pre><code class="html">&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;

        &lt;!--something--&gt;

        &lt;script&gt;&lt;/script&gt;
        &lt;script&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>async, defer 屬性</h2>

<p>雖然可以將<code>&lt;script&gt;</code>放置在<code>&lt;body&gt;&lt;/body&gt;</code>的尾端，來減少使用者觀感不佳，但是實際上放置在尾端還是會有阻塞(Blocking)的問題，這個問題依舊沒有解決。</p>

<p>所以在<code>HTML5</code>終究提出了新的<code>async</code>以及<code>defer</code>屬性來解決阻塞(Blocking)的問題，在<code>&lt;script&gt;</code>中加上這兩個屬性就可以讓有支援的瀏覽器，以非同步的方式下載<code>JavaScript</code>並執行其內容。</p>

<pre><code class="html">&lt;script src="file.js"&gt;&lt;/script&gt;
&lt;script src="file.js" defer&gt;&lt;/script&gt;
&lt;script src="file.js" async&gt;&lt;/script&gt;
</code></pre>

<p><code>&lt;script&gt;</code>，停止網頁繪製，等待<code>JavaScript</code>下載並執行完，再繼續網頁繪製。</p>

<p><code>&lt;script defer&gt;</code>，不停止網頁繪製，<code>JavaScript</code>的下載會同時進行，等待網頁繪製完成會再執行<code>JavaScript</code>。</p>

<p><code>&lt;script async&gt;</code>，不停止網頁繪製，<code>JavaScript</code>的下載會同時進行，當<code>JavaScript</code>下載完成後，再停止網頁繪製並執行<code>JavaScript</code>，等待執行完成後再繼續網頁繪製。</p>

<p>Peter Beverloo在他的網誌上有繪製一張時序圖，用來說明這兩個新的屬性與傳統的載入方式有什麼不同，可參考下方連結。</p>

<ul>
<li><a href="http://peter.sh/experiments/asynchronous-and-deferred-javascript-execution-explained/" target="_blank">Asynchronous and deferred JavaScript execution explained</a></li>
</ul>

<h2>RequireJS</h2>

<p><code>async</code>與<code>defer</code>屬性可以解決阻塞問題，但也引起了一個新的問題，那就是以非同步方是執行的<code>JavaScript</code>的執行順序並不是依照<code>&lt;script&gt;</code>在HTML上的順序，而是誰先下載好就先執行誰，如果你的<code>JavaScript</code>的設計在執行上有相依性的問題就有機會因為執行順序的不同而爆炸。</p>

<p>因此<code>RequireJS</code>的出現能夠解決此問題，它可以以非同步方式載入<code>JavaScript</code>，並且也可以解決<code>JavaScript</code>檔案之前的相依性問題，並讓<code>JavaScript</code>模組化。</p>

<p>在這並沒有要說明使用方式，可以參考網路上現有的文件，如下。</p>

<ul>
<li><a href="http://requirejs.org/" target="_blank">How to get started with RequireJS</a></li>
<li><a href="http://www.jaceju.net/blog/archives/beginning-requirejs/" target="_blank">初探 RequireJS</a></li>
<li><a href="http://ithelp.ithome.com.tw/question/10120521" target="_blank">實用 JavaScript 工具庫：RequireJS</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank">Javascript模块化编程（三）：require.js的用法</a></li>
</ul>

<h2>小結</h2>

<p>上面提出的幾種解決方法，但是在實作時也不用全用上，依照當下的實作規模來做取捨，雖然沒有提到但是在製作<code>Mobile Web</code>時要更加注意<code>JavaScript</code>載入(以及其他多媒體檔案的載入)，因<code>3G</code>或是<code>Wifi</code>並沒有比有線網路來的快速，所以網頁讀取時的停頓感會更加的放大，這點必須注意。</p>
]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Ubuntu 14.04 LTS 中文修正]]></title>
		<link href="http://scar.simcz.tw/article/2014/04/22/fix-ubuntu-14-04-lts-zh-font-selector/" />
		<id>urn:uuid:d754ac2a-27a9-c507-ba1e-691e304feed9</id>
		<updated>2014-04-22T01:02:53+08:00</updated>
		<summary type="html"><![CDATA[<h2>前言</h2>

<p>很高興<code>Ubuntu</code>釋出了新的長期支援版本<code>Ubuntu 14.04 LTS</code>，終於在新的版本中輸入法的切換終於正常了。</p>

<p>另外很不幸的，在<code>Ubuntu 14.04 LTS</code>釋出前的一個月中，我所架設的 <a href="ftp://ftp.csie.chu.edu.tw">ftp.csie.chu.edu.tw</a> 因為不可抗拒之因素導致伺服器下線，進而造成它在台灣預設來源庫名單中除名，這件事讓我非常失志。</p>

<p>好，回到正題，我習慣使用英文界面，但是我又希望看見漂亮的中文字體。但是在這一版更新完語言套件之後你卻會得到一個預設字體是<code>標楷體</code>以及<code>細明體</code>的中文顯示...，頓時讓人回到<code>Big5</code>網頁的感覺。</p>

<p>我還是喜歡看<code>文泉驛微米黑</code>或者是類似的字體，但是這次的修改方式跟上幾版不太一樣，所以我就在這紀錄一下。</p>

<!--more-->

<h2><del>開幹</del> 動手做</h2>

<pre><code class="bash">cd /etc/fonts/conf.d
</code></pre>

<p>我們先把<code>Console</code>的路徑指向<code>/etc/fonts/conf.d</code>，這個路徑底下的檔案基本上是設定檔的軟連結，而真正的設定檔則是放在<code>/etc/fonts/conf.avail</code>。</p>

<h3>刪除不必要之設定檔</h3>

<p>這邊所刪除檔案的是關於<code>標楷體</code>以及<code>細明體</code>的設定檔。</p>

<pre><code class="bash">sudo rm 25-arphic-ukai-render.conf 35-arphic-ukai-aliases.conf 41-arphic-ukai.conf 65-fonts-arphic-ukai.conf 75-arphic-ukai-select.conf 90-arphic-ukai-embolden.conf 25-arphic-uming-render.conf 35-arphic-uming-aliases.conf 41-arphic-uming.conf 64-arphic-uming.conf 65-fonts-arphic-uming.conf 90-arphic-uming-embolden.conf
</code></pre>

<p>接著我們再刪除除了台灣以外的中文設定檔。(這邊就端看所需要的是那一地區的中文來做保留。)</p>

<pre><code class="bash">sudo rm 69-language-selector-zh-cn.conf 69-language-selector-zh-hk.conf 69-language-selector-zh-mo.conf 69-language-selector-zh-sg.conf
</code></pre>

<p>上面的動作都做完以後，恭喜我們得到了一個預設字體是<code>文泉驛正黑</code>的中文界面...，如果不愛<code>文泉驛正黑</code>下面則是<code>文泉驛微米黑</code>的修改方式。</p>

<h3>修改設定檔</h3>

<h4>65-nonlatin.conf</h4>

<p>首先我們先修改非拉丁字體的設定檔，加上<code>文泉驛微米黑</code>的設定。</p>

<pre><code class="bash">sudo vim 65-nonlatin.conf
</code></pre>

<p><code>&lt;family&gt;WenQuanYi Micro Hei&lt;/family&gt;</code>加在<code>sans-serif</code>的區塊裡。</p>

<pre><code class="xml">&lt;alias&gt;
    &lt;family&gt;sans-serif&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;WenQuanYi Micro Hei&lt;/family&gt;
        &lt;family&gt;Nachlieli&lt;/family&gt; &lt;!-- hebrew --&gt;
        &lt;family&gt;Lucida Sans Unicode&lt;/family&gt;
        ...
</code></pre>

<p><code>&lt;family&gt;WenQuanYi Micro Hei Mono&lt;/family&gt;</code>則是加在<code>monospace</code>區塊裡。</p>

<pre><code class="xml">&lt;alias&gt;
    &lt;family&gt;monospace&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;WenQuanYi Micro Hei Mono&lt;/family&gt;
        &lt;family&gt;Miriam Mono&lt;/family&gt; &lt;!-- hebrew --&gt;
        &lt;family&gt;VL Gothic&lt;/family&gt;
        ...
</code></pre>

<h4>69-language-selector-zh-tw.conf</h4>

<p>最後我們修改中文字體選擇器的設定檔。</p>

<pre><code class="bash">sudo vim 69-language-selector-zh-tw.conf
</code></pre>

<p><code>&lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;</code>一樣是加在<code>sans-serif</code>裡。</p>

<pre><code class="xml">&lt;match target="pattern"&gt;
    &lt;test qual="any" name="family"&gt;
        &lt;string&gt;sans-serif&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name="lang"&gt;
        &lt;string&gt;zh-tw&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name="family" mode="prepend" binding="strong"&gt;
        &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;
        &lt;string&gt;Droid Sans Fallback&lt;/string&gt;
        &lt;string&gt;WenQuanYi Zen Hei&lt;/string&gt;
        ...
</code></pre>

<p><code>&lt;string&gt;WenQuanYi Micro Hei Mono&lt;/string&gt;</code>則也是加在<code>monospace</code>裡。</p>

<pre><code class="xml">&lt;match target="pattern"&gt;
    &lt;test qual="any" name="family"&gt;
        &lt;string&gt;monospace&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name="lang"&gt;
        &lt;string&gt;zh-tw&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name="family" mode="prepend" binding="strong"&gt;
        &lt;string&gt;WenQuanYi Micro Hei Mono&lt;/string&gt;
        &lt;string&gt;Droid Sans Fallback&lt;/string&gt;
        &lt;string&gt;WenQuanYi Zen Hei Mono&lt;/string&gt;
        ...
</code></pre>

<h2>打完收工</h2>

<p><del>記得千萬不要手殘在<code>Console</code>中輸入<code>sudo fc-cache -fv</code>或是<code>sudo fc-font -v</code>，別怪我沒提醒你。</del></p>

<p>不打上面的指令更新字型快取的原因是因為它有機會造成<code>Chrome</code>的分頁標籤變成亂碼，不過我已經查到方法的可以修復了。</p>

<h4>/etc/fonts/conf.d/49-sansserif.conf</h4>

<p>打開這個文件，然後將<code>sans-serif</code>改成你要的字型就可以了。</p>

<p>這樣你愛怎麼下<code>sudo fc-cache -fv</code>或是<code>sudo fc-cache -v</code>都隨便你。</p>

<pre><code class="xml">        &lt;edit name="family" mode="append_last"&gt;
            &lt;!--string&gt;sans-serif&lt;/string--&gt;
            &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;
        &lt;/edit&gt;
    &lt;/match&gt;
&lt;/fontconfig&gt;
</code></pre>

<p><strong>Update: 2014/05/04</strong></p>
]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Ubuntu內建PCRE Library所造成的PHP Segmentation Fault]]></title>
		<link href="http://scar.simcz.tw/article/2014/02/23/ubuntu-bundled-pcre-and-php-segmentation-fault/" />
		<id>urn:uuid:9c6fe9d4-f272-a151-b70c-85a2798de930</id>
		<updated>2014-02-23T15:22:14+08:00</updated>
		<summary type="html"><![CDATA[<h2>接續</h2>

<p>我前天說到我要找時間查查到底是什麼原因造成<code>PHP</code>的<code>Segmentation Fault</code>，我想本篇文章的標題已經指名原因了，<del>那我就結束這回合</del>。</p>

<p>當然我還是在這邊紀錄一下流程以及解決方法，然後在除錯的過程中還順便解了一個<code>PHPBrew</code>的<code>Bug</code>，這個<code>Bug</code>就是關於<code>./configure</code>找不到<code>libpcre(.a|.so)</code>的問題，原因是出在於系統架構的判斷。</p>

<p>先不管這個，我之前說過只要<code>preg_match()</code>只要輸入的字串一長就會發生錯誤，所以我們朝<code>PCRE Library</code>進行。</p>

<!--more-->

<h2>觀察 ./configure 設定配置</h2>

<p>我找了一個之前編譯的正常<code>PHP</code>所使用的配置，現在有問題的配置做比對。其中發現<code>PCRE</code>的設定方式不相同。</p>

<p>舊的配置關於<code>PCRE</code>的部份只有<code>--with-pcre-regex</code>，而新的配置則是<code>--with-pcre-regex=/usr --with-pcre-dir=/usr</code>。</p>

<p>新的<code>--with-pcre-regex=/usr</code>其實不影響執行，真正有問題的部份出在於<code>--with-pcre-regex</code>與<code>--with-pcre-regex=/usr</code>的對於實際編時所引入的函式庫不同。</p>

<p><code>--with-pcre-regex</code>所代表的是編譯時引入<code>PHP</code>內建的<code>PCRE</code>函式庫，而<code>--with-pcre-regex=/usr</code>所代表的是引入外部的<code>PCRE</code>函式庫。</p>

<p>造成的原因是因為<code>PHPBrew</code>的版次問題所造成，它會檢查系統中是否已經有<code>PCRE</code>函式庫，如果已經存在就會自動在<code>--with-pcre-regex</code>後面加上<code>prefix</code>。</p>

<h2>使用不同的函式庫</h2>

<p>為了要測試原因是否是系統內建的問題，或者是只要引入外部<code>PCRE</code>就會出錯，所以我就另外編譯了新的<code>PCRE</code>函式庫作為測試。</p>

<ul>
<li>PCRE版本

<ul>
<li>8.31-2 <code>Ubuntu 13.10</code>內建</li>
<li>8.32 <code>PHP 5.4.25</code>內建</li>
<li>8.34 自行編譯最新版</li>
</ul></li>
</ul>

<p>編譯過程我就省略，<code>PHP 5.4.25</code>以及自行編譯的<code>PCRE</code>都可以正常執行。最後結果就是系統內建的<code>PCRE</code>有問題，並且連帶系統內建的<code>PHP 5.5.3</code>都會出現同樣的問題。</p>

<h2>解決方案</h2>

<p>雖然不知道內建的<code>PCRE</code>究竟是哪邊出問題，不過我有兩種解決方法。不是移除系統內建的<code>PCRE</code>讓<code>PHP</code>用本身的函式庫，就是使用自行編譯的<code>PCRE</code>。</p>

<p>下面我就把我的<code>PHPBrew</code>安裝設定公開出來，因為我是使用自行編譯的<code>PCRE</code>所以在最後要指定函式庫位置。</p>

<pre><code>phpbrew -d install 5.4.25 +default+db+openssl+iconv -- --with-pcre-regex=/opt/pcre
</code></pre>
]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Pointless所遭遇到的Segmentation Faults]]></title>
		<link href="http://scar.simcz.tw/article/2014/02/21/pointless-with-segmentation-faults/" />
		<id>urn:uuid:e16b71f6-7c17-48af-d429-faf16564a56b</id>
		<updated>2014-02-21T08:03:01+08:00</updated>
		<summary type="html"><![CDATA[<h2>怪事</h2>

<p>在開發<code>Pointless</code>到現在的兩年期間內，初期其實都還算順利，直到最近幾個月遇到了兩次<code>Segmentation Fault</code>，終於我遇的不是<code>PHP</code>的<code>Syntax Error</code>，而是<code>PHP</code>的<code>Bugs</code>或是其中函式庫的問題。</p>

<p>寫直譯式語言可以遇到語言的錯誤還滿猛的，一次是在<code>OS X</code>上用<code>PHPBrew</code>編出的<code>PHP</code>，另一次就是最近在<code>Ubuntu 13.10</code>及<code>Ubuntu 12.04 LTS</code>上還是用<code>PHPBrew</code>所編出的<code>PHP</code>。</p>

<p>題外話，話說<code>PHPBrew</code>超好用的，可以在不同版本的下作切換，對於開發來說實在是很棒。</p>

<!--more-->

<h2>在OS X的那次</h2>

<p>我先後在不同的兩台<code>Mac Air</code>測試過都會發生錯誤，在文章數量小的情況下不會有問題，但是文章只要一多就會發生錯誤。</p>

<p>而出錯的地方就是用來將資料及樣板結合的<code>bindData()</code>其中只有<code>include</code>以及<code>Output Buffer</code>等函式，但我檢查不出是<code>PHP VM</code>編譯時的哪支有問題所以作罷。</p>

<p>還因為這樣，當時還有人評論說這個部落格只要文章超過140字元就會爆炸。但這不是我的錯，這一定有誤會。</p>

<h2>在Ubuntu的這次</h2>

<p>最近，其實就是上禮拜，我再忙著把<code>Pointless</code>升級成支援<code>PHP 5.4</code>所以將系統中<code>PHP 5.4.12</code>升級到<code>PHP 5.4.25</code>以及<code>PHP 5.5.5</code>升級到<code>PHP 5.5.9</code>。</p>

<p>但是<code>PHP</code>在<code>./configure</code>的時候會出現<code>configure: error: Could not find libpcre.(a|so) in /usr</code>而失敗，把出現問題的檔案補上後，可以正常編譯了。</p>

<p>當我正開心要作測試的時候，他就爆了。這次的問題出現在剛剛的<code>PCRE Library</code>上，只要我在程式中使用<code>preg_match()</code>然後所輸入的字串太長就會爆炸。</p>

<p>所以我就重新編譯了新的<code>PCRE Library</code>，想當然爾<code>./configure</code>還是找不到檔案，手動補上檔案後在同樣的地方還是爆了...。最後我在另外一台機器上編譯同樣的檔案，使用同樣的<code>./configure</code>設定結果還是一樣。</p>

<h1>結論</h1>

<p><code>Mac OS X</code>系統預設的函式庫跟我正常使用的<code>Ubuntu</code>一定有哪邊不一樣。</p>

<p><code>Ubuntu</code>幾個月前的所使用的函式庫跟現在跟更新後的<code>Ubuntu</code>的函式庫一定有哪邊不一樣。</p>

<p>到底哪裡不一樣？我還要再查查。</p>
]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Chrome - Enable Hardware Graphics]]></title>
		<link href="http://scar.simcz.tw/article/2014/01/19/chrome-enable-hardware-graphics/" />
		<id>urn:uuid:be5efe37-3cce-6273-edfc-c51b30429dbd</id>
		<updated>2014-01-19T12:48:58+08:00</updated>
		<summary type="html"><![CDATA[<h2>難得</h2>

<p>很難得可以在一天內發兩篇文章，在上一篇文末提到<code>WebGL</code>打不開的問題，那是個誤會，真的。</p>

<p>在<code>Chrome</code>的<code>chrome://flags</code>裡有一個選項<code>Override software rendering list</code>可以開啟硬體加速，在更新驅動程式前我怎樣試都不行，所以我就以為沒有用。</p>

<p>其實在驅動程式更新之後就已經可以使用了，只是硬體加速還要另外開啟，讓我產生<code>WebGL</code>無法開啟的錯覺。</p>

<!--more-->

<h2>正常啟用流程</h2>

<p>我們可以在<code>Chrome</code>中使用<code>chrome://gpu</code>這個連結去確認是否有開啟硬加速，在一般情況下都是呈現下方的狀態。</p>

<p><img src="/images/chrome-enable-hardware-graphics/gpu001.jpg" alt="Hardware Graphics"></p>

<p>根據上面所顯示的問題並去解決，就能開啟硬體加速，首先更據目前所用的作業統以及顯示卡，更新相對應的驅動程式。</p>

<p>在我的系統上，更新驅動程式後的狀態如下圖，原本紅紅一片的狀態逐漸變為正常了，<code>WebGL</code>也已經可以使用。</p>

<p><img src="/images/chrome-enable-hardware-graphics/gpu002.jpg" alt="Hardware Graphics"></p>

<p>最後將<code>chrome://flags</code>中的<code>Override software rendering list</code>啟動，並重新開啟<code>Chrome</code>。</p>

<p><img src="/images/chrome-enable-hardware-graphics/flags001.jpg" alt="Hardware Graphics"></p>

<p><img src="/images/chrome-enable-hardware-graphics/flags002.jpg" alt="Hardware Graphics"></p>

<p>最後就會得一片綠油油的正常狀態。</p>

<p><img src="/images/chrome-enable-hardware-graphics/gpu003.jpg" alt="Hardware Graphics"></p>

<h2>爽</h2>

<p>接下就爽爽用<code>Chrome</code>上的硬體加速吧。</p>
]]></summary>
	</entry>
</feed>