<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle><![CDATA[< IS >]]></subtitle>
	<link href="https://scar.tw/atom.xml" rel="self" />
	<link href="https://scar.tw/" />
	<id>urn:uuid:4d418d05-9f8f-0741-8939-1476077aab63</id>
	<updated>2020-08-24T01:10:15+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>https://scar.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[Voigtlander Nokton Classic 35mm F1.4 感想]]></title>
		<link href="https://scar.tw/article/2020/08/22/voigtlander-nokton-classic-35mm-f14-review/" />
		<id>urn:uuid:9edaf450-5ccd-3cbe-b7e1-0fb75d2e7d1c</id>
		<updated>2020-08-24T01:10:07+08:00</updated>
		<summary type="html"><![CDATA[<p>17 年因為一些因素買了無反單眼 A7M2，雖然買 Kit 組但隨附的 <a href="https://www.flickr.com/photos/scarwu/albums/72157667060653179" target="_blank">Sony FE 28-70mm F3.5-5.6 OSS</a> 卻不得我心。</p>
<p>於是想要多買一顆鏡頭，在我期望中是一個輕巧有特色的鏡頭，於是在二手市場中買了 <a href="https://www.flickr.com/photos/scarwu/albums/72157663021744648" target="_blank">Voigtlander Nokton Classic 35mm F1.4</a> 作為旅行的隨身使用。</p>
<p>這邊就來說說這幾年用下來的感想。</p>
<!--more-->
<h2>外觀</h2>
<p>35mm 的焦段、F1.4 的光圈、全金屬鏡身，它非常小一顆很適合作為鏡頭蓋使用。</p>
<p>雖然是 2008 年推出的手動鏡頭但稱不上所謂的老鏡，它是一顆 <code>M-mount</code> 的鏡頭需要轉接，於是額外買了神力環作為近拍搭配使用。</p>
<p><img src="https://live.staticflickr.com/65535/50250975278_ead21ec826_h.jpg"></p>
<p><img src="https://live.staticflickr.com/65535/50251610666_9ec5161f0f_h.jpg"></p>
<p><img src="https://live.staticflickr.com/65535/50251796512_df1626a867_h.jpg"></p>
<h2>成像</h2>
<p>雖然是復刻舊式手動鏡頭但是焦外算是柔和的，但在特殊條件下散景的二線性算是明顯。</p>
<p>光圈全開中心銳度還不錯，但鏡組本身是單純的球面鏡片所以在光源充足時畫面會非常軟，甚至在逆光時會有環形耀光。</p>
<p><img src="https://live.staticflickr.com/4527/26877778929_9dde250243_h.jpg"></p>
<p><img src="https://live.staticflickr.com/4913/44286960620_54232d1311_h.jpg"></p>
<p><img src="https://live.staticflickr.com/4774/40038465544_e1c20fdc92_h.jpg"></p>
<p><img src="https://live.staticflickr.com/65535/48860442156_d9024a3646_h.jpg"></p>
<p><img src="https://live.staticflickr.com/7834/31953990417_839da39a51_h.jpg"></p>
<p>而且在光圈全開時邊緣失光的暗角也非常明顯，會使中心與邊緣有比較強的對比，顏色也會有所不同。</p>
<p><img src="https://live.staticflickr.com/4764/38996132184_45aa321023_h.jpg"></p>
<p><img src="https://live.staticflickr.com/924/29430238268_c61c723e21_h.jpg"></p>
<p>但縮光圈之後又是另外一種風格，畫面也可以很銳利，等於擁有了兩顆不同的鏡頭。</p>
<p><img src="https://live.staticflickr.com/1742/42642425121_5bbce46f12_h.jpg"></p>
<p><img src="https://live.staticflickr.com/65535/48860591127_391245f9a4_h.jpg"></p>
<p>在燈光昏暗時它 F1.4 的光圈就非常好用，不會有聖光顏色也很柔和，另外長曝的星芒也是滿好看的。</p>
<p><img src="https://live.staticflickr.com/65535/49895136222_0d1f51d134_h.jpg"></p>
<p><img src="https://live.staticflickr.com/844/41490501970_e530cd9c8a_h.jpg"></p>
<p><img src="https://live.staticflickr.com/1766/42415146185_b60e1234c0_h.jpg"></p>
<p><img src="https://live.staticflickr.com/4847/45191938005_a7f378cd01_h.jpg"></p>
<p>雖然上面說的這些可能是為缺陷，但是就是這樣才有特色，有時候因為不完美而完美，在日常的使用中它是我很高的一顆鏡頭。</p>
<h2>最後</h2>
<p>鏡頭與相機搭配起來非常輕巧，尺寸也不大很適合隨身攜帶，手動鏡頭本身不吃電，這樣反而讓本身續航力就不是很好的 A7M2 能多拍幾張。</p>
<p>35mm 的焦段雖然在使用上可能受到局限，但我不知為何就偏好定焦鏡尤其是 35mm。但就是因為這個焦段才讓我能貼近人群，讓我行走在各地的街道中觀察各個的地方。</p>
<p>這顆鏡頭用了這幾年下來，雖然它並沒有完成當初買它的真正目的，但我很滿意。</p>
<p><br></p>
<p>其他相片都放在 <a href="https://www.flickr.com/photos/scarwu/albums/72157663021744648" target="_blank">Flickr</a> 上了。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[XPG Summoner 開箱]]></title>
		<link href="https://scar.tw/article/2020/02/03/xpg-summoner-unboxing/" />
		<id>urn:uuid:3ed28b19-0fba-aabc-4300-8d669284961e</id>
		<updated>2020-02-03T19:05:55+08:00</updated>
		<summary type="html"><![CDATA[<p>沒錯今年第一篇就是開箱文，這就要說到去年參加 2019 鍵盤趴的時候<a href="/article/2018/12/16/ganss-gm-108d-unboxing/">又抽到鍵盤</a>了，所以該寫的文還是要寫一下。</p>
<p>相較於去年的文書鍵盤，今年抽到的是把電競鍵盤，但有趣的是去年的是紅軸今年是青軸，如果軸能夠互換那就完美。</p>
<p>但還是要說一下我已經習慣了 HHKB 的配置了，所以已經很少在使用一般配置的鍵盤，現在比較吸引我的應該會是分離式的人體工學鍵盤。</p>
<!--more-->
<h2>外盒</h2>
<p>今天的主角是 XPG Summoner，而 XPG 這個品牌是 ADATA 威剛的高效能品牌。</p>
<p>先來看看外盒，用紅黑色作為主視覺很符合電競的主軸，基本上算是很大一盒。</p>
<p>外盒直接就說明了這是一支使用 RGB 的 Cherry 軸鍵盤，並且擁有手拖以及有多媒體控制、一個外接 Port 還有替換用的鍵帽。</p>
<p><img src="/images/xpg-summoner-unboxing/000.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/001.jpg" alt="" /></p>
<p>雖然外盒上寫的是銀軸實際上這把是使用青軸，應該是在鍵盤趴展示的時候有裝錯，不過不要緊。</p>
<p><img src="/images/xpg-summoner-unboxing/002.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/003.jpg" alt="" /></p>
<h2>內部包裝</h2>
<p>打開外合印了大大的 <code>Game to the Xtreme</code> 表明這是支針對電競發揮至極限的鍵盤。</p>
<p><img src="/images/xpg-summoner-unboxing/004.jpg" alt="" /></p>
<p>內部放了說明文件、一包真空包裝的鍵帽以及拔鍵器。</p>
<p><img src="/images/xpg-summoner-unboxing/010.jpg" alt="" /></p>
<p>拿出鍵盤主體，它兩側是使用泡綿固定而背面則是放置手托。</p>
<p><img src="/images/xpg-summoner-unboxing/011.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/012.jpg" alt="" /></p>
<p>以下是鍵帽、拔鍵器及說明書的內容物，隨附的鍵帽是使用紅色透明二色成型的形式，LED 的背光可直接透過。</p>
<p><img src="/images/xpg-summoner-unboxing/013.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/014.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/015.jpg" alt="" /></p>
<h2>手托</h2>
<p>手托是使用塑料的材質，內部的填充物為海綿而外層則是合成皮，這個在使用一陣子後可能會有龜裂的問題。</p>
<p>中間則是一個大大的 XPG 的 Logo，而手托跟鍵盤本身的連結是使用磁吸式的方式固定。</p>
<p><img src="/images/xpg-summoner-unboxing/020.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/021.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/022.jpg" alt="" /></p>
<h2>鍵盤正面</h2>
<p>鍵盤的主體是使用無上蓋的設計，所以可以直接看到部分的軸體，而背版則是接使用整塊的金屬製成。</p>
<p><img src="/images/xpg-summoner-unboxing/023.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/024.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/025.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/026.jpg" alt="" /></p>
<h2>鍵盤背面</h2>
<p>背面則是簡潔俐落，只有腳墊以及產品資訊。</p>
<p><img src="/images/xpg-summoner-unboxing/030.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/031.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/032.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/033.jpg" alt="" /></p>
<p>而增高腳墊只有一段，下面則是增高的幅度。</p>
<p><img src="/images/xpg-summoner-unboxing/034.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/035.jpg" alt="" /></p>
<h2>周邊介面</h2>
<p>USB 是使用編織線材，非常粗壯且與主體是一體式的無法單獨更換線材，而在與主機連接的部分一個是鍵盤的訊號、另一個則是鍵盤上 HUB 的訊號線。</p>
<p>現在比較少將訊號線分多個，如果能將兩條線整合為一條，在空間的利用上會有更好的表現。</p>
<p><img src="/images/xpg-summoner-unboxing/040.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/041.jpg" alt="" /></p>
<p>鍵盤的 USB HUB Port 僅為一個，算是不太夠用，如果能增為兩個以上或者是 3.5mm 的音源孔也許會更好。</p>
<p><img src="/images/xpg-summoner-unboxing/042.jpg" alt="" /></p>
<p>鍵盤右上角為多媒體控制的區域以及燈號顯示，分別是靜音按鈕、音量旋鈕以及燈號顯示（依序是電競模式、NUMBER LOCK、CAPS LOCK）。</p>
<p><img src="/images/xpg-summoner-unboxing/043.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/044.jpg" alt="" /></p>
<h2>軸與鍵帽</h2>
<p>如同前面所說到的，雖然外盒是寫銀軸但實際上是青軸，且為 RGB 透明軸體式樣。</p>
<p><img src="/images/xpg-summoner-unboxing/050.jpg" alt="" /></p>
<p>鍵帽本身為黑色透明二色成型，透明的部分可以透出 LED 的光源。</p>
<p><img src="/images/xpg-summoner-unboxing/051.jpg" alt="" /></p>
<h2>燈光控制</h2>
<h3>各級亮度</h3>
<p>可透過 FN + UP/DOWM 組合鍵修改 LED 燈光的亮度，亮度分為四級。</p>
<p><img src="/images/xpg-summoner-unboxing/060.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/061.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/062.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/063.jpg" alt="" /></p>
<h3>各色顯示</h3>
<p>可透過 FN + F1~F6 組合鍵修改整體鍵盤的顏色，不過這個顏色不是隨意修改的不同的顏色代表不同模式，除了紅色為一般模式外其餘的五種顏色分別為不同的電競模式。</p>
<p><img src="/images/xpg-summoner-unboxing/070.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/071.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/072.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/073.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/074.jpg" alt="" /></p>
<p><img src="/images/xpg-summoner-unboxing/075.jpg" alt="" /></p>
<h3>燈色呈現</h3>
<p>可透過 FN + LEFT/RIGHT 組合鍵切換鍵盤顏色顯示的模式，模式分為一般的全亮、呼吸燈、互動式燈光或是 RGB 彩虹顯示，以及特殊的 FPS 模式僅顯示重要的按鍵（如下圖）。</p>
<p><img src="/images/xpg-summoner-unboxing/080.jpg" alt="" /></p>
<h2>總結</h2>
<p>在鍵盤的配置以及功能上，算是滿樸實的一把，如果能夠加強周邊連結的部分（例如提供而外的快捷鍵或是更多的插孔）應該會再加分的。</p>
<p>但除說得以外，鍵盤本身的質感跟做工算是不錯的了。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[每個人心中都有一套 RESTful API]]></title>
		<link href="https://scar.tw/article/2019/07/13/every-one-has-own-restful-api/" />
		<id>urn:uuid:d5f50dbf-d370-fc00-b1a1-ddd1e18b64ac</id>
		<updated>2019-09-29T00:26:40+08:00</updated>
		<summary type="html"><![CDATA[<!--
在2011 2000論文 弔詭的是實作 Rails 將 REST 發揚光大，但
拿 rails 的實作你可以參考但不能視為一個標準是不合邏輯的
除非明訂有標準可循 IEEE RFC WSDL SOAP RPC
符合設計原則
設計風格不是標準
HTTP Status Code 有限 rfc 標準
瀏覽器支援度
後端語言支援度
實作複雜度
每個人實作都有能會有一些差異 只要符合設計原則都能稱之為
但事實上不好實作所以大部分一些大廠 API都只會表明說是 RESTful-like
淺見
-->
<p>當年還在念書的時候，不免俗的看了 Roy Fielding 寫的相關論文。</p>
<p>而論文中所提到設計風格，則隨後因為 <code>Rails</code> 而漸漸眾所皆知。</p>
<!--more-->
<h2>學習實作</h2>
<p>在查了許多關於如何實作的資料之後，發現除了論文中所提的設計風格重點之外，其中最常搭配的就是 <code>Rails</code> 的實作。</p>
<p>許多人會學習第一次學習實作 <code>RESTful API</code> 的第一個版本便是 Rails 的實作版本。</p>
<p>並且將它視為一個標準，當有另一個實作版本提出時某部分的細節不符合 Rails 的版本，便會遭到質疑。</p>
<h2>標準？原則！</h2>
<p>但要特別注意的是 <code>REST</code> 從來就不是標準，它也不像 <code>RPC</code> 及 <code>SOAP</code> 等有標準規範可以參考，也不會有任何一個實作是標準。</p>
<p>它僅是一個設計風格、是一個原則，只要設計出的 API 有達到 <code>REST</code> 其中所提到的約束，就能稱之為 RESTful API。</p>
<h2>難易度</h2>
<p>雖然使用 REST 設計風格來實作 API 現在還是蔚為風潮，但是它並沒有辦法這麼容易實作，在有些應用上會有些設計的難處，所以有些大廠提供的 <code>API</code> 都會稱為 <code>REST-like</code>，它像是 <code>REST</code> 但不是 <code>REST</code>。</p>
<p>關於 <code>Verbs</code> 大致上會有，<code>HTTP Method</code> 數量有限不好隨易擴充，因為會違反 <code>RFC</code> 的標準，另外還有實作語言支援度的問題。而 <code>URI</code> 的來說，通常一組 <code>URI</code> 都視為一組資源的操作，有可能在一寫複雜的需求中會不好設計。</p>
<p>例如 <code>使用者忘記密碼重新設定</code> 的功能如果要設計及實作的話，很可能就會超出了限制範圍，雖然都是對 <code>/user</code> 這個資源操作，但很有可能你所需要的操作不符合 <code>Verb</code> 或是 <code>URI</code>。</p>
<p>最後 <code>Hypermedia</code> 是表明敘述資源本身，以及如何前往其他相關的資源，等等操作方法。</p>
<p>以上。</p>
<!--
### HTTP Method 有限
在目前最常用的就屬 `GET`、`POST`、`PUT` 及 `DELETE` 這四種 `Method` 最常用。
還有 `OPTIONS`、`HEAD` 及 `PATCH` 這三種 `Method` 還算是有用到。
最後是 `CONNECT` 及 `TRACE` 這兩種 `Method` 通常不會用到。
以上 9 種 `Method` 理論上實作不能超出這個限制，不然就會違反 `RFC` 的標準。
### 前端語言支援度
以前端的 JS 所提供的 `XMLHttpRequest` 來說僅支援六種 `Method` (`GET`、`POST`、`PUT`、`DELETE`、`OPTIONS` 及 `HEAD`) 所以在實作上，如果是提供給前端所使用也無法超出此限制。
### 後端語言支援度
以後端語言 `PHP` 來說，雖然送任何的 `Mehotd` 它雖然都能接受，但僅有 `POST Method` 會預設對 `Request Body` 做處理 (`Content-Type` 為 `application/x-www-form-urlencoded` 及 `multipart/form-data`)，除此之外不管是要用 `application/json` 或是 `application/xml`都必須要自行處理，但基本上影響不大。
### 設計與實作複雜度
最後以設計與實作面來說，例如 `使用者忘記密碼重新設定` 的功能如果要設計及實作的話，很可能就會超出了限制範圍，雖然都是對 `/user` 這個資源操作，但很有可能你所需要的操作不符合 `Verb` 或是 `URI`。
以上，一點點的淺見。
-->
<h2>References</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods</a></li>
<li><a href="https://en.wikipedia.org/wiki/XMLHttpRequest">https://en.wikipedia.org/wiki/XMLHttpRequest</a></li>
<li><a href="https://scar.tw/article/2012/08/19/hack-php-to-support-put-fileupload/">https://scar.tw/article/2012/08/19/hack-php-to-support-put-fileupload/</a></li>
</ul>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[用 Redis 簡單粗暴實作 MQ]]></title>
		<link href="https://scar.tw/article/2019/05/29/using-redis-implement-mq/" />
		<id>urn:uuid:865669d5-3e0a-1f74-54fa-fddf72d77b0f</id>
		<updated>2019-05-29T12:57:24+08:00</updated>
		<summary type="html"><![CDATA[<p>話先說在前頭 <code>Redis</code> 是快取伺服器不是 <code>Message Queue</code>，但有時候現實面不允許時還是必須要妥協。</p>
<p>先用 <code>Redis</code> 將功能實作出來，往後再找適合的 <code>MQ</code> 產品去替換 <code>Redis</code>。</p>
<!--more-->
<h2>簡單說明</h2>
<p><code>Redis</code> 是一個分散式且支援持久化的 <code>key-value</code> 快取伺服器，除了單純 <code>Get/Set</code> 操作變數之外還提供許多額外的函數用來操作變數。</p>
<h2>運作原理</h2>
<p>上面說到了除了單純的 <code>Get/Set</code> 之外，能夠實作 <code>MQ</code> 的關鍵就在於而外提供的函數，主要能夠實作出 <code>MQ</code> 的關鍵在於 <code>Push/Pop</code> 的函數。</p>
<p>這組函數主要是將變數作為 List 處理，可以將它模擬成 <code>Queue</code> 或是 <code>Stack</code>，現在我們是要將它實作成 <code>MQ</code> 所以我們要模擬成 <code>Queue</code>。</p>
<p>我們可以使用函數 <code>lPush, brPop</code> 或是 <code>rPush, blPop</code> 實作，要注意的是我們在 <code>Pop</code> 的時候使用 <code>Blocking</code> 模式的函數，可以設定 <code>Connection Timeout</code> 用來減少伺服器壓力。</p>
<h2>Sample Code</h2>
<p>下面是簡單的程式範例。</p>
<h3>Producer</h3>
<pre><code>&lt;?php
$redis = (new Redis)-&gt;connect('127.0.0.1', 6379);

// Enqueue
$json = json_encode([
    'timestamp' =&gt; time()
]);
$redis-&gt;lPush('mq', $json);</code></pre>
<h3>Consumer</h3>
<pre><code>&lt;?php
$redis = (new Redis)-&gt;connect('127.0.0.1', 6379);

// Dequeue
$bundle = $redis-&gt;brPop('mq', 60);
$json = json_decode($bundle[1], true);

var_dump($json);</code></pre>
<h2>Reference</h2>
<ul>
<li><a href="https://zh.wikipedia.org/zh-tw/Redis">Redis - Wiki</a></li>
<li><a href="https://github.com/phpredis/phpredis">PHP Redis</a></li>
</ul>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[使用 PHP OPCache 的正確姿勢]]></title>
		<link href="https://scar.tw/article/2019/05/29/php-opcache-tuning/" />
		<id>urn:uuid:a5d92b8a-eea9-b360-9dab-1ee83a3d17d2</id>
		<updated>2019-05-29T11:39:59+08:00</updated>
		<summary type="html"><![CDATA[<p><code>PHP OPCache</code> 看起來很迷人，但有時會被它傷得滿身，有可能今早用起來好好的系統，下午就突然壞掉了。</p>
<p>人在江湖飄，哪能不挨刀？某天我就挨了好幾刀。</p>
<!--more-->
<h2>Trouble</h2>
<p>基本上在生產環境開啟它是正確的選擇，對於效能上增進還是很不錯的，但凡事都有意外...例如無法強制清除快取。</p>
<p>問題是這樣子的，在某次部署之後，強制清除快取卻異常失效，快取的檔案版本不一致，導致網站異常。</p>
<p>所以又去看了原本的設定並且做了一且調整。</p>
<h2>Config</h2>
<p>下面是所有的設定，但有些設定還是要注意一下。</p>
<p>設定要注意一下，<code>opcache.validate_timestamps</code> 在開啟的時候 <code>opcache.revalidate_freq</code> 的時間檢查才會發揮作業。</p>
<p>但在生產環境上是推薦將 <code>opcache.validate_timestamps</code> 關閉，然後在部署成功之後再清除快取。</p>
<p>但因為有發生過無法強制清除快取的事件，所以在這邊折衷將 <code>opcache.validate_timestamps</code> 開啟讓 <code>Opcache</code> 去自動檢查並清除快取。</p>
<pre><code>[opcache]
;opcache.enable=0
;opcache.enable_cli=0
;opcache.memory_consumption=64
;opcache.interned_strings_buffer=4
;opcache.max_accelerated_files=2000
;opcache.max_wasted_percentage=5
;opcache.use_cwd=1
;opcache.validate_timestamps=1
;opcache.revalidate_freq=2
;opcache.revalidate_path=0
;opcache.save_comments=1
;opcache.load_comments=1
;opcache.fast_shutdown=1
;opcache.enable_file_override=0
;opcache.optimization_level=0xffffffff
;opcache.inherited_hack=1
;opcache.dups_fix=0
;opcache.blacklist_filename=
;opcache.max_file_size=0
;opcache.consistency_checks=0
;opcache.force_restart_timeout=180
;opcache.error_log=
;opcache.log_verbosity_level=1
;opcache.preferred_memory_model=
;opcache.protect_memory=0</code></pre>
<p>以下針對此次問題所調整的設定。</p>
<pre><code>opcache.validate_timestamps=1
opcache.revalidate_freq=60</code></pre>
<h2>Clean Cache</h2>
<p>清除快取的方式，必須在正確的行程中執行指令或是將行程重新啟動才能清除。</p>
<p>所以這邊要注意的是在 <code>CLI</code> 執行 <code>opcache_reset()</code> 是無法影響到 <code>php-fpm</code> 的。</p>
<pre><code class="language-php">&lt;?php
opcache_reset();</code></pre>
<pre><code class="language-bash">service php-fpm reload</code></pre>
<h2>Reference</h2>
<ul>
<li><a href="https://php.net/manual/en/opcache.configuration.php">Opcache Runtime Configuration</a></li>
<li><a href="https://ma.ttias.be/how-to-clear-php-opcache/">How To Clear PHP’s Opcache</a></li>
<li><a href="https://gywbd.github.io/posts/2016/1/best-config-for-zend-opcache.html">zend opcache的最佳设置</a></li>
</ul>]]></summary>
	</entry>
</feed>