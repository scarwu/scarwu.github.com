<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle><![CDATA[< IS >]]></subtitle>
	<link href="https://scar.tw/atom.xml" rel="self" />
	<link href="https://scar.tw/" />
	<id>urn:uuid:4d418d05-9f8f-0741-8939-1476077aab63</id>
	<updated>2019-06-20T14:27:12+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>https://scar.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[用 Redis 簡單粗暴實作 MQ]]></title>
		<link href="https://scar.tw/article/2019/05/29/using-redis-implement-mq/" />
		<id>urn:uuid:865669d5-3e0a-1f74-54fa-fddf72d77b0f</id>
		<updated>2019-05-29T12:57:24+08:00</updated>
		<summary type="html"><![CDATA[<p>話先說在前頭 <code>Redis</code> 是快取伺服器不是 <code>Message Queue</code>，但有時候現實面不允許時還是必須要妥協。</p>
<p>先用 <code>Redis</code> 將功能實作出來，往後再找適合的 <code>MQ</code> 產品去替換 <code>Redis</code>。</p>
<!--more-->
<h2>簡單說明</h2>
<p><code>Redis</code> 是一個分散式且支援持久化的 <code>key-value</code> 快取伺服器，除了單純 <code>Get/Set</code> 操作變數之外還提供許多額外的函數用來操作變數。</p>
<h2>運作原理</h2>
<p>上面說到了除了單純的 <code>Get/Set</code> 之外，能夠實作 <code>MQ</code> 的關鍵就在於而外提供的函數，主要能夠實作出 <code>MQ</code> 的關鍵在於 <code>Push/Pop</code> 的函數。</p>
<p>這組函數主要是將變數作為 List 處理，可以將它模擬成 <code>Queue</code> 或是 <code>Stack</code>，現在我們是要將它實作成 <code>MQ</code> 所以我們要模擬成 <code>Queue</code>。</p>
<p>我們可以使用函數 <code>lPush, brPop</code> 或是 <code>rPush, blPop</code> 實作，要注意的是我們在 <code>Pop</code> 的時候使用 <code>Blocking</code> 模式的函數，可以設定 <code>Connection Timeout</code> 用來減少伺服器壓力。</p>
<h2>Sample Code</h2>
<p>下面是簡單的程式範例。</p>
<h3>Producer</h3>
<pre><code>&lt;?php
$redis = (new Redis)-&gt;connect('127.0.0.1', 6379);

// Enqueue
$json = json_encode([
    'timestamp' =&gt; time()
]);
$redis-&gt;lPush('mq', $json);</code></pre>
<h3>Consumer</h3>
<pre><code>&lt;?php
$redis = (new Redis)-&gt;connect('127.0.0.1', 6379);

// Dequeue
$bundle = $redis-&gt;brPop('mq', 60);
$json = json_decode($bundle[1], true);

var_dump($json);</code></pre>
<h2>Reference</h2>
<ul>
<li><a href="https://zh.wikipedia.org/zh-tw/Redis">Redis - Wiki</a></li>
<li><a href="https://github.com/phpredis/phpredis">PHP Redis</a></li>
</ul>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[使用 PHP OPCache 的正確姿勢]]></title>
		<link href="https://scar.tw/article/2019/05/29/php-opcache-tuning/" />
		<id>urn:uuid:a5d92b8a-eea9-b360-9dab-1ee83a3d17d2</id>
		<updated>2019-05-29T11:40:17+08:00</updated>
		<summary type="html"><![CDATA[<p><code>PHP OPCache</code> 看起來很迷人，但有時會被它傷得滿身，有可能今早用起來好好的系統，下午就突然壞掉了。</p>
<p>人在江湖飄，哪能不挨刀？某天我就挨了好幾刀。</p>
<!--more-->
<h2>Trouble</h2>
<p>基本上在生產環境開啟它是正確的選擇，對於效能上增進還是很不錯的，但凡事都有意外...例如無法強制清除快取。</p>
<p>問題是這樣子的，在某次部署之後，強制清除快取卻異常失效，快取的檔案版本不一致，導致網站異常。</p>
<p>所以又去看了原本的設定並且做了一且調整。</p>
<h2>Config</h2>
<p>下面是所有的設定，但有些設定還是要注意一下。</p>
<p>設定要注意一下，<code>opcache.validate_timestamps</code> 在開啟的時候 <code>opcache.revalidate_freq</code> 的時間檢查才會發揮作業。</p>
<p>但在生產環境上是推薦將 <code>opcache.validate_timestamps</code> 關閉，然後在部署成功之後再清除快取。</p>
<p>但因為有發生過無法強制清除快取的事件，所以在這邊折衷將 <code>opcache.validate_timestamps</code> 開啟讓 <code>Opcache</code> 去自動檢查並清除快取。</p>
<pre><code>[opcache]
;opcache.enable=0
;opcache.enable_cli=0
;opcache.memory_consumption=64
;opcache.interned_strings_buffer=4
;opcache.max_accelerated_files=2000
;opcache.max_wasted_percentage=5
;opcache.use_cwd=1
;opcache.validate_timestamps=1
;opcache.revalidate_freq=2
;opcache.revalidate_path=0
;opcache.save_comments=1
;opcache.load_comments=1
;opcache.fast_shutdown=1
;opcache.enable_file_override=0
;opcache.optimization_level=0xffffffff
;opcache.inherited_hack=1
;opcache.dups_fix=0
;opcache.blacklist_filename=
;opcache.max_file_size=0
;opcache.consistency_checks=0
;opcache.force_restart_timeout=180
;opcache.error_log=
;opcache.log_verbosity_level=1
;opcache.preferred_memory_model=
;opcache.protect_memory=0</code></pre>
<p>以下針對此次問題所調整的設定。</p>
<pre><code>opcache.validate_timestamps=1
opcache.revalidate_freq=60</code></pre>
<h2>Clean Cache</h2>
<p>清除快取的方式，必須在正確的行程中執行指令或是將行程重新啟動才能清除。</p>
<p>所以這邊要注意的是在 <code>CLI</code> 執行 <code>opcache_reset()</code> 是無法影響到 <code>php-fpm</code> 的。</p>
<pre><code class="language-php">&lt;?php
opcache_reset();</code></pre>
<pre><code class="language-bash">service php-fpm reload</code></pre>
<h2>Reference</h2>
<ul>
<li><a href="https://php.net/manual/en/opcache.configuration.php">Opcache Runtime Configuration</a></li>
<li><a href="https://ma.ttias.be/how-to-clear-php-opcache/">How To Clear PHP’s Opcache</a></li>
<li><a href="https://gywbd.github.io/posts/2016/1/best-config-for-zend-opcache.html">zend opcache的最佳设置</a></li>
</ul>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Nginx + Lua with Alpine Linux]]></title>
		<link href="https://scar.tw/article/2019/05/28/nginx-lua-with-alpine-linux/" />
		<id>urn:uuid:46cde755-2df6-a88c-f1a0-d9935edfa500</id>
		<updated>2019-06-20T14:26:22+08:00</updated>
		<summary type="html"><![CDATA[<p>最近在升級公司服務，在原有的環境是使用 <code>Ubuntu</code> + <code>Nginx Extras</code>，但為了最小化容器尺寸所以使用了 <code>Alpine Linux</code>，原本想說能順利轉換，但事情絕對不會是憨人想得這麼簡單。</p>
<p>雖然 <code>Alpine</code> 的 <code>Nginx</code> 有把 <code>Lua Module</code> 編進去，但是 <code>Nginx</code> 在運行時會缺少新版的 <code>Openresty LuaJIT</code> 核心導致無法運行，且在套件庫中的 <code>LuaJIT</code> 只有舊版，原本嘗試自行編譯但遇到了一些問題繞了些路，最終解決方法卻異常簡單。</p>
<!--more-->
<h2>Code</h2>
<h3>Dockerfile</h3>
<p>解決 <code>Openresty LuaJIT</code> 核心的問題，原本也是要連同 <code>Nignx</code> 一起自行編譯的。</p>
<p>最後直接使用 <code>Openresty</code> 官方的 <code>Alpine Linux</code> 然後再把 <code>Nginx</code> 跟 <code>Lua Module</code> 直接安裝進去就完成了。</p>
<pre><code class="language-dockerfile">FROM openresty/openresty:alpine

RUN apk --update add \
    nginx \
    nginx-mod-http-lua \
    nginx-mod-http-lua-upstream

...</code></pre>
<h3>Nginx Config</h3>
<p>接著在 <code>Nginx</code> 的設定檔中加入最重要的一段設定載入動態套件庫以及 <code>Lua Lib</code> 的路徑到 <code>OpenResty</code>。</p>
<pre><code class="language-conf">user nginx nginx;

include /etc/nginx/modules/*.conf;

...

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;/volume/config/lua/lib/?.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";

    ...
}</code></pre>
<h2>Done</h2>
<p>這樣 <code>Alpine Linux</code> 的 <code>Nginx</code> 就可以支援 <code>Lua</code>，而不用回頭用 <code>Ubuntu</code> 的解決方案了。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[良好的專案檔案編排]]></title>
		<link href="https://scar.tw/article/2019/02/13/good-file-structure-for-project/" />
		<id>urn:uuid:50088711-0cfe-90d0-3af9-54a320877538</id>
		<updated>2019-02-13T02:21:04+08:00</updated>
		<summary type="html"><![CDATA[<p>在看過各種語言以及各種專案之後，對於專案資料夾結構的編排有了一些想法，可能對於一些人來說覺得意義不大，將檔案整齊排放是個好習慣。</p>
<p>良好的結構讓檔案一目了然有助於開發，你可能會說習慣成自然，專案通常不會只有一個人開發也會有交接的問題，養成好習慣把結構整理乾淨。</p>
<p>一般框架或工具的官方文件，亦或者是使用 CLI 工具所產生出來的專案，通常都會有既定的結構存在，通常我在開發時不會照單全收，通常還會再進一步修改。</p>
<!--more-->
<h2>編排</h2>
<p>基本上資料夾的結構編排，通常是遵循一個大方向將檔案擺放整齊，以一般網站開發的專案來說通常會有以下幾種類型的檔案：</p>
<ol>
<li>原始碼
<ul>
<li>專案本身的程式碼</li>
</ul></li>
<li>說明文件
<ul>
<li>程式碼說明、應用程式接口或是第三方套件的說明文件</li>
</ul></li>
<li>測試文件
<ul>
<li>程式碼本身的測試</li>
</ul></li>
<li>第三方套件與設定
<ul>
<li>可能來自 <code>npm</code>、<code>bower</code>、<code>composer</code> 或是 <code>gem</code> 的設定文件以及安裝目標的資料夾</li>
</ul></li>
<li>CI/CD 設定
<ul>
<li>持續整合、交付或是部署的設定檔</li>
</ul></li>
<li>Module Bundler
<ul>
<li>像是 <code>webpack</code> 或是 <code>bowserify</code> 之類的工具</li>
</ul></li>
<li>Task Runner
<ul>
<li>輔助開發的行程工具例如 <code>gulp</code> 或 <code>grunt</code></li>
</ul></li>
<li>輸出檔
<ul>
<li>編譯好的檔案，或是可用作部署的檔案</li>
</ul></li>
<li>暫存檔
<ul>
<li>一些開發過程中會產生的暫時性檔案</li>
</ul></li>
<li>其它
<ul>
<li>根據開發不同可能會用到的其它檔案</li>
</ul></li>
</ol>
<h3>檔案</h3>
<p>大致上的編排方法是將 <code>第三方套件設定</code>、<code>CI/CD 設定</code>、<code>Module Bundler</code> 及 <code>Task Runner</code>，這類的檔案放置在專案的根目錄中，主要原因為：</p>
<ol>
<li>這類的檔案通常關乎到專案本身的設定</li>
<li>輔助開發的工具通常是將設定放置於此</li>
</ol>
<h3>資料夾</h3>
<p>接下來是將 <code>原始碼</code>、<code>說明文件</code>、<code>測試程文件</code>、<code>輸出檔</code> 及 <code>暫存檔</code> 分別獨立出一個資料夾個別存放該檔案。</p>
<p>這幾類的檔案占了專案大部分，每種類型的檔案用途都非常明確，所以獨立存放會是個好選擇也方便管理。</p>
<h2>命名</h2>
<p>上面說到了擺放的原則，那接下來資料夾的命名也是很重要，除了放置在專案根目錄有既有名稱之外的資料夾基本上都是自由命名，但就跟寫程式一樣參數及函式的命名一樣要淺顯易懂。</p>
<p>所以通常我會這樣命名：</p>
<ol>
<li>原始碼
<ul>
<li>通常會使用 <code>src</code> 或是 <code>source</code>，我使用前者居多。如果是程式碼本身結構所使用的資料夾，一般參考框架本身的建議</li>
</ul></li>
<li>說明文件
<ul>
<li>一般使用 <code>docs</code> 要寫 <code>manual</code> 也行，內部名稱結構依據閱讀方式自行規劃</li>
</ul></li>
<li>測試文件
<ul>
<li>就使用 <code>tests</code> 了，內部資料夾一樣也是根據工具的規範</li>
</ul></li>
<li>輸出檔
<ul>
<li>這邊可以是 <code>release</code>、<code>dist</code> 或是 <code>output</code>，如果最後編出的是指令的話可以使用 <code>bin</code></li>
</ul></li>
<li>暫存檔
<ul>
<li><code>tmp</code> 或是 <code>temp</code></li>
</ul></li>
</ol>
<h2>好處</h2>
<p>對於個人或是團隊的助益有以下幾點：</p>
<ol>
<li>降低閱讀門檻</li>
<li>利用開發</li>
<li>易於管理</li>
<li>潔癖覺得舒服</li>
<li>也是重構的其中一環</li>
</ol>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[曼德拉效應在工程的應用]]></title>
		<link href="https://scar.tw/article/2019/01/28/mandela-effect-in-engineering/" />
		<id>urn:uuid:0ac6e3dd-68c3-9f3d-ce69-12234da312fa</id>
		<updated>2019-01-29T10:41:33+08:00</updated>
		<summary type="html"><![CDATA[<p>以下故事如有雷同，不是巧合。</p>
<p>有一天早上公司的人員沖沖得跑來向你回報了一個功能上的錯誤，你看了看發現這個錯誤早在很久以前就被修改掉了。</p>
<!--more-->
<p>你試了試自己的測試機以及正式機，發現它真的出問題了。</p>
<p>然而你在記憶中記得它不應該會這樣，所以你問了你旁邊的 RD 同事確認當初是否有被修復，他也回答了你確實有被修復，但你還是不太放心所以你也問了當初測試過的 QA 同事，他也給予你一個肯定的答案。</p>
<p>雖然同事們都記得它都是正常的，但現在卻壞了你覺得非常不可思議，所以你想搞清楚程式碼究竟是什麼時後被搞壞的，你接著打開了 Sourcetree 的 Git log 看了看…。</p>
<p>驚人的事情發生了，發生錯誤的地方修改的時間竟然是兩年前，在你記憶中曾經修改過的解決方式竟然消失了，你納悶究竟在這兩年內功能是怎樣運作的。</p>
<p>事實上的程式碼跟你和你同事的印象中都不同…，你怎樣也想不通這是怎麼一回事。</p>
<h2>Reference</h2>
<p><a href="https://zh.wikipedia.org/zh-tw/%E6%9B%BC%E5%BE%B7%E6%8B%89%E6%95%88%E6%87%89">曼德拉效應 on wiki</a></p>]]></summary>
	</entry>
</feed>