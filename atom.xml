<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[ScarShow | 刀疤說]]></title>
	<subtitle>I know that I don't know</subtitle>
	<link href="http://scar.tw/atom.xml" rel="self" />
	<link href="http://scar.tw/" />
	<id>urn:uuid:4d418d05-9f8f-0741-8939-1476077aab63</id>
	<updated>2015-01-10T01:55:38+08:00</updated>
	<author>
		<name><![CDATA[ScarWu]]></name>
		<uri>http://scar.tw/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[HHKB Pro2 開箱]]></title>
		<link href="http://scar.tw/article/2015/01/09/happy-hacking-keyboard-pro2-unboxing/" />
		<id>urn:uuid:8655e668-76df-33a6-dbf5-9ad72a4026c6</id>
		<updated>2015-01-09T23:53:17+08:00</updated>
		<summary type="html"><![CDATA[<p>其實本來沒有打算要買這隻鍵盤的，但近日日幣的走勢實在是太讓人衝動，然後就衝了，原先是請朋友去日本順便幫我帶，不過去了大阪日本橋卻沒有找到，也謝謝他們幫我找。</p>
<p>後來透過朋友介紹代購公司幫我代買，下訂之後大約兩星期就送到了，這樣折合台幣含運費大約七張小朋友，價格真的不是許多人能接受。</p>
<!--more-->
<h2>實照</h2>
<p>盒子就跟我的 <code>CM Storm Quick Fire Rapid 紅軸</code> 差不多大了，拆開之後小很多，我買的是灰色墨刻型號是 <code>PD-KB400D</code> ，沒有買無刻的原因是因為整隻都灰色的不好看...，有點顏色比較好，另外就是實在上墨刻的顏色在視覺上滿低調的。</p>
<p><img alt="HHKB Pro2" src="/images/happy-hacking-keyboard-pro2-unboxing/001.jpg" /></p>
<p><img alt="HHKB Pro2" src="/images/happy-hacking-keyboard-pro2-unboxing/002.jpg" /></p>
<p><img alt="HHKB Pro2" src="/images/happy-hacking-keyboard-pro2-unboxing/003.jpg" /></p>
<p>因為網路上的照片很多，所以就沒有多照了。</p>
<h2>使用</h2>
<p>我將後面的開關設定為 <code>101110</code> ，這樣的 <code>Layout</code> 原本的使用習慣比較相近，實際上使用了幾天，因為還沒有完全熟悉所以開發程式的速度受了一點影響。</p>
<p>但先不管網路上的評論說這隻鍵盤比較適合哪一種的作業系統或這是哪一種的文字編輯器，但在我實際的使用上它的確是隻很特殊的鍵盤，不管是在手感或者是按鍵的編排。</p>
<p>使用上的深刻感受，就非的 <code>Ctrl</code> 及 <code>Fn</code> 鍵莫屬，因為將按鍵上移，在使用組合鍵時小拇指終於不用用很鱉的姿勢去按組合鍵，這樣小拇指也能夠比較放鬆。</p>
<p>另外就是手感，它的段落比較明顯，在使用上感覺比較重手，相較平常工作用的 <code>FILCO Ninja 茶軸</code> 來說，但是按鍵的聲音有比較小聲一點，原本茶軸是是 "卡卡卡" 現在這隻是 "豆豆豆"。</p>
<p>關於保護部份，因為它沒有防塵蓋所以我使用完之後都把它收進抽屜去，雖然日本有專用防塵袋及防塵蓋但也不便宜，得另外再找找看其它替代方案了。</p>
<h2>最後</h2>
<p>因為我這幾天都在用 <code>HHKB Pro2</code>，所以就把原本的鍵盤借給了同事，沒想到他用了兩天就馬上入坑了，但這時候一定要澄清說我只是在推薦好東西。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[MySQL/MariaDB 5.5 Replication Setting]]></title>
		<link href="http://scar.tw/article/2014/11/12/mysql-or-mariadb-5-5-replication-setting/" />
		<id>urn:uuid:0323e681-0995-01d3-b9dc-18c6bd5777a8</id>
		<updated>2014-11-12T11:21:31+08:00</updated>
		<summary type="html"><![CDATA[<p>久違的文章，我竟然長達半年沒有寫文章，最近退伍又很剛好找到工作了。又有一堆雜事可以做，我想之後應該有一堆東西可以紀錄吧。</p>
<p>最近忙著幫公司架設<code>Raid</code>跟備份機制，這邊就紀錄一下<code>MySQL Replication</code>的流程，雖然說是<code>MySQL</code>但是公司實際上是用<code>MariaDB</code>但這不是重點，基本上操作是一樣的。</p>
<p>在<code>Replication</code>的機制上<code>MySQL Server</code>分為<code>Master</code>與<code>Slave</code>，在一般的應用中主要還是用於負載平衡，但在這邊我只是要用於備份。</p>
<!--more-->
<h2>設定 Master 資料庫</h2>
<p>首先先在<code>Master</code>的<code>my.cnf</code>的設定檔案中加上以下設定：</p>
<pre><code class="language-conf"># my.cnf
[mysqld]
server-id=1
log-bin=/path/to/mysql-bin</code></pre>
<p><code>server-id</code>在伺服器中必須是唯一值，數值大小是 1 ~ 2<sup>32</sup>-1，<code>log-bin</code>則是設定<code>Binary Log</code>的路徑。</p>
<p>如果想要針對特定的資料庫做複寫或不要複寫到<code>Slave</code>，可以再另外加上以下的設定。</p>
<pre><code class="language-conf"># 要複寫的
binlog-do-db=db1
binlog-do-db=db2
# 不要複寫的
binlog-ignore-db=db3
binlog-ignore-db=db4</code></pre>
<p>當設定完成之後重新啟動<code>Master</code>。</p>
<pre><code class="language-bash">service mysql restart</code></pre>
<p>接著登入伺服器使用指令<code>SHOW MASTER STATUS</code>觀看<code>Master</code>的狀態。</p>
<pre><code class="language-sql">mysql &gt; SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000008 | 5723     | db1,db2      | db3,db4          |
+------------------+----------+--------------+------------------+</code></pre>
<p>接著為<code>Master</code>加上<code>Slave</code>用來<code>Replication</code>的專用帳號，將<code>USER_NAME</code>、<code>USER_PASS</code>及<code>SLAVE_HOST</code>換成你的資料。</p>
<pre><code class="language-sql">CREATE USER 'USER_NAME'@'SLAVE_HOST' IDENTIFIED BY 'USER_PASS';
GRANT REPLICATION SLAVE ON *.* TO 'USER_NAME'@'SLAVE_HOST';
FLUSH PRIVILEGES;</code></pre>
<p>最後將資料庫的資料匯出，然後傳送到<code>Slave</code>接著下面的<code>Slave</code>資料庫設定步驟。這邊的參數<code>--master-data</code>是匯出時一同匯出<code>Master</code>的資料包含<code>Log file</code>及<code>Log position</code>，而<code>--all-databases</code>是指整個資料庫，其中不包含<code>information_schema</code>及<code>performance_schema</code>但有<code>mysql</code>資料庫。</p>
<pre><code class="language-bash">mysqldump -u root -p --master-data --all-databases &gt; all_db.sql</code></pre>
<h2>設定 Slave 資料庫</h2>
<p>將剛剛的從<code>Master</code>傳送過來的檔案匯入<code>Slave</code>之中，如果不想要將<code>Slave</code>的使用者權限覆蓋過去的話，請將檔案中有關於<code>mysql</code>資料庫的指令移除。</p>
<pre><code class="language-bash">mysql -u root -p &lt; all_db.sql</code></pre>
<p>同樣也是設定將<code>Slave</code>加上<code>server-id</code>設定。</p>
<pre><code class="language-conf"># my.cnf
[mysqld]
server-id=2</code></pre>
<p>設定指定資料庫是否被<code>Master</code>複寫。</p>
<pre><code class="language-conf"># 要複寫的
replicate-do-db=db1
replicate-do-db=db2
# 不要複寫的
replicate-ignore-db=db3
replicate-ignore-db=db4</code></pre>
<p>設定完成後重新啟動<code>Slave</code>。</p>
<pre><code class="language-bash">service mysql restart</code></pre>
<p>然後在登入前先去看剛剛匯入的檔案，找出以下的<code>query</code>，把這邊的<code>Log File</code>跟<code>Log Position</code>記錄下來等一下會用到。</p>
<pre><code class="language-sql">CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.00008', MASTER_LOG_POS=5723;</code></pre>
<p>接著登入<code>Slave</code>，然後用以下指令讓<code>Slave</code>對應到<code>Master</code>，請記得先修改<code>USER_NAME</code>及<code>USER_PASS</code>為剛剛在<code>Master</code>所輸入的帳密，<code>MASTER_HOST</code>為<code>Master</code>的網路位置，最後將<code>LOG_FILE</code>及<code>LOG_POS</code>修改為剛剛所記錄下來的資料。</p>
<pre><code class="language-sql">CHANGE MASTER TO
    MASTER_HOST='MASTER_HOST',
    MASTER_USER='USER_NAME',
    MASTER_PASSWORD='USER_PASS',
    MASTER_PORT=3306,
    MASTER_LOG_FILE='LOG_FILE',
    MASTER_LOG_POS=LOG_POS,
    MASTER_CONNECT_RETRY=10;</code></pre>
<p>接著啟動<code>Slave</code>的<code>Replication</code>機制。</p>
<pre><code class="language-sql">START SLAVE;</code></pre>
<p>最後使用<code>SHOW SLAVE STATUS \G;</code>來觀看<code>Slave</code>的狀態，如果<code>Replication</code>正確的話應該會長下面這樣。</p>
<pre><code class="language-sql">mysql &gt; SHOW SLAVE STATUS \G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: MASTER_HOST
                  Master_User: USER_NAME
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000009
          Read_Master_Log_Pos: 6635
               Relay_Log_File: db1-relay-bin.000002
                Relay_Log_Pos: 156
        Relay_Master_Log_File: mysql-bin.000008
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 90650
              Relay_Log_Space: 6164
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 1</code></pre>
<h2>收工</h2>
<p>說明就到這邊，可以另外在<code>Master</code>更動幾筆資料，看看是否<code>Slave</code>是否也會同樣做動來驗證。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[HTML中JavaScript的載入問題]]></title>
		<link href="http://scar.tw/article/2014/05/09/html-javascript-load-problem/" />
		<id>urn:uuid:6ee60399-2dc7-b6aa-100c-18920fb1a3e8</id>
		<updated>2014-05-09T00:09:14+08:00</updated>
		<summary type="html"><![CDATA[<h2>前言</h2>
<p>一般在瀏覽器中對於<code>HTML</code>的解析順序是由上而下的，所以在傳統的網頁設計中我們一般都會將<code>&lt;script&gt;</code>標籤放置在<code>&lt;head&gt;&lt;/head&gt;</code>中，這樣能確保<code>JavaScript</code>盡早被執行到。</p>
<p>但是隨著近年來網頁不再只是網頁，而漸漸成為了<code>Web Application</code>，因為如此所以使用到的<code>JavaScript</code>就變得越來越大，這時候<code>JavaScript</code>的載入就是個問題。</p>
<!--more-->
<h2>阻塞 (Blocking)</h2>
<p>在傳統的瀏覽器中，每當解析到了<code>&lt;script&gt;</code>標籤時瀏覽器的繪製就會停頓下來，然後去下載並執行<code>JavaScript</code>中的內容，過多的<code>JavaScript</code>內容會造成阻塞問題，便是瀏覽器停頓一段時間等待<code>JavaScript</code>都執行完畢後，才開始繪製剩下的網頁內容。</p>
<p>上面提到，一般會將<code>&lt;script&gt;</code>標前放置在<code>&lt;head&gt;&lt;/head&gt;</code>中，這會造成網頁在一片空白的情況下停頓許久。</p>
<pre><code class="language-html">&lt;html&gt;
    &lt;head&gt;
        &lt;script&gt;&lt;/script&gt;
        &lt;script&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--something--&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>所以現在會建議將<code>&lt;script&gt;</code>放置在<code>&lt;body&gt;&lt;/body&gt;</code>的尾端，等待瀏覽器將大部分的內容都繪製出來之後再去執行<code>JavaScript</code>，這樣比較不會造成使用者的觀感不佳。</p>
<pre><code class="language-html">&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;

        &lt;!--something--&gt;

        &lt;script&gt;&lt;/script&gt;
        &lt;script&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<h2>async, defer 屬性</h2>
<p>雖然可以將<code>&lt;script&gt;</code>放置在<code>&lt;body&gt;&lt;/body&gt;</code>的尾端，來減少使用者觀感不佳，但是實際上放置在尾端還是會有阻塞(Blocking)的問題，這個問題依舊沒有解決。</p>
<p>所以在<code>HTML5</code>終究提出了新的<code>async</code>以及<code>defer</code>屬性來解決阻塞(Blocking)的問題，在<code>&lt;script&gt;</code>中加上這兩個屬性就可以讓有支援的瀏覽器，以非同步的方式下載<code>JavaScript</code>並執行其內容。</p>
<pre><code class="language-html">&lt;script src="file.js"&gt;&lt;/script&gt;
&lt;script src="file.js" defer&gt;&lt;/script&gt;
&lt;script src="file.js" async&gt;&lt;/script&gt;</code></pre>
<p><code>&lt;script&gt;</code>，停止網頁繪製，等待<code>JavaScript</code>下載並執行完，再繼續網頁繪製。</p>
<p><code>&lt;script defer&gt;</code>，不停止網頁繪製，<code>JavaScript</code>的下載會同時進行，等待網頁繪製完成會再執行<code>JavaScript</code>。</p>
<p><code>&lt;script async&gt;</code>，不停止網頁繪製，<code>JavaScript</code>的下載會同時進行，當<code>JavaScript</code>下載完成後，再停止網頁繪製並執行<code>JavaScript</code>，等待執行完成後再繼續網頁繪製。</p>
<p>Peter Beverloo在他的網誌上有繪製一張時序圖，用來說明這兩個新的屬性與傳統的載入方式有什麼不同，可參考下方連結。</p>
<ul>
<li><a href="http://peter.sh/experiments/asynchronous-and-deferred-javascript-execution-explained/">Asynchronous and deferred JavaScript execution explained</a></li>
</ul>
<h2>RequireJS</h2>
<p><code>async</code>與<code>defer</code>屬性可以解決阻塞問題，但也引起了一個新的問題，那就是以非同步方是執行的<code>JavaScript</code>的執行順序並不是依照<code>&lt;script&gt;</code>在HTML上的順序，而是誰先下載好就先執行誰，如果你的<code>JavaScript</code>的設計在執行上有相依性的問題就有機會因為執行順序的不同而爆炸。</p>
<p>因此<code>RequireJS</code>的出現能夠解決此問題，它可以以非同步方式載入<code>JavaScript</code>，並且也可以解決<code>JavaScript</code>檔案之前的相依性問題，並讓<code>JavaScript</code>模組化。</p>
<p>在這並沒有要說明使用方式，可以參考網路上現有的文件，如下。</p>
<ul>
<li><a href="http://requirejs.org/">How to get started with RequireJS</a></li>
<li><a href="http://www.jaceju.net/blog/archives/beginning-requirejs/">初探 RequireJS</a></li>
<li><a href="http://ithelp.ithome.com.tw/question/10120521">實用 JavaScript 工具庫：RequireJS</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript模块化编程（三）：require.js的用法</a></li>
</ul>
<h2>小結</h2>
<p>上面提出的幾種解決方法，但是在實作時也不用全用上，依照當下的實作規模來做取捨，雖然沒有提到但是在製作<code>Mobile Web</code>時要更加注意<code>JavaScript</code>載入(以及其他多媒體檔案的載入)，因<code>3G</code>或是<code>Wifi</code>並沒有比有線網路來的快速，所以網頁讀取時的停頓感會更加的放大，這點必須注意。</p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Ubuntu 14.04 LTS 中文修正]]></title>
		<link href="http://scar.tw/article/2014/04/22/fix-ubuntu-14-04-lts-zh-font-selector/" />
		<id>urn:uuid:c456d194-e789-dbba-2a0a-b0943bbb50c2</id>
		<updated>2014-04-22T01:02:53+08:00</updated>
		<summary type="html"><![CDATA[<h2>前言</h2>
<p>很高興<code>Ubuntu</code>釋出了新的長期支援版本<code>Ubuntu 14.04 LTS</code>，終於在新的版本中輸入法的切換終於正常了。</p>
<p>另外很不幸的，在<code>Ubuntu 14.04 LTS</code>釋出前的一個月中，我所架設的 <a href="ftp://ftp.csie.chu.edu.tw">ftp.csie.chu.edu.tw</a> 因為不可抗拒之因素導致伺服器下線，進而造成它在台灣預設來源庫名單中除名，這件事讓我非常失志。</p>
<p>好，回到正題，我習慣使用英文界面，但是我又希望看見漂亮的中文字體。但是在這一版更新完語言套件之後你卻會得到一個預設字體是<code>標楷體</code>以及<code>細明體</code>的中文顯示...，頓時讓人回到<code>Big5</code>網頁的感覺。</p>
<p>我還是喜歡看<code>文泉驛微米黑</code>或者是類似的字體，但是這次的修改方式跟上幾版不太一樣，所以我就在這紀錄一下。</p>
<!--more-->
<h2><del>開幹</del> 動手做</h2>
<pre><code class="language-bash">cd /etc/fonts/conf.d</code></pre>
<p>我們先把<code>Console</code>的路徑指向<code>/etc/fonts/conf.d</code>，這個路徑底下的檔案基本上是設定檔的軟連結，而真正的設定檔則是放在<code>/etc/fonts/conf.avail</code>。</p>
<h3>刪除不必要之設定檔</h3>
<p>這邊所刪除檔案的是關於<code>標楷體</code>以及<code>細明體</code>的設定檔。</p>
<pre><code class="language-bash">sudo rm 25-arphic-ukai-render.conf 35-arphic-ukai-aliases.conf 41-arphic-ukai.conf 65-fonts-arphic-ukai.conf 75-arphic-ukai-select.conf 90-arphic-ukai-embolden.conf 25-arphic-uming-render.conf 35-arphic-uming-aliases.conf 41-arphic-uming.conf 64-arphic-uming.conf 65-fonts-arphic-uming.conf 90-arphic-uming-embolden.conf</code></pre>
<p>接著我們再刪除除了台灣以外的中文設定檔。(這邊就端看所需要的是那一地區的中文來做保留。)</p>
<pre><code class="language-bash">sudo rm 69-language-selector-zh-cn.conf 69-language-selector-zh-hk.conf 69-language-selector-zh-mo.conf 69-language-selector-zh-sg.conf</code></pre>
<p>上面的動作都做完以後，恭喜我們得到了一個預設字體是<code>文泉驛正黑</code>的中文界面...，如果不愛<code>文泉驛正黑</code>下面則是<code>文泉驛微米黑</code>的修改方式。</p>
<h3>修改設定檔</h3>
<h4>65-nonlatin.conf</h4>
<p>首先我們先修改非拉丁字體的設定檔，加上<code>文泉驛微米黑</code>的設定。</p>
<pre><code class="language-bash">sudo vim 65-nonlatin.conf</code></pre>
<p><code>&lt;family&gt;WenQuanYi Micro Hei&lt;/family&gt;</code>加在<code>sans-serif</code>的區塊裡。</p>
<pre><code class="language-xml">&lt;alias&gt;
    &lt;family&gt;sans-serif&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;WenQuanYi Micro Hei&lt;/family&gt;
        &lt;family&gt;Nachlieli&lt;/family&gt; &lt;!-- hebrew --&gt;
        &lt;family&gt;Lucida Sans Unicode&lt;/family&gt;
        ...</code></pre>
<p><code>&lt;family&gt;WenQuanYi Micro Hei Mono&lt;/family&gt;</code>則是加在<code>monospace</code>區塊裡。</p>
<pre><code class="language-xml">&lt;alias&gt;
    &lt;family&gt;monospace&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;WenQuanYi Micro Hei Mono&lt;/family&gt;
        &lt;family&gt;Miriam Mono&lt;/family&gt; &lt;!-- hebrew --&gt;
        &lt;family&gt;VL Gothic&lt;/family&gt;
        ...</code></pre>
<h4>69-language-selector-zh-tw.conf</h4>
<p>最後我們修改中文字體選擇器的設定檔。</p>
<pre><code class="language-bash">sudo vim 69-language-selector-zh-tw.conf</code></pre>
<p><code>&lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;</code>一樣是加在<code>sans-serif</code>裡。</p>
<pre><code class="language-xml">&lt;match target="pattern"&gt;
    &lt;test qual="any" name="family"&gt;
        &lt;string&gt;sans-serif&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name="lang"&gt;
        &lt;string&gt;zh-tw&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name="family" mode="prepend" binding="strong"&gt;
        &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;
        &lt;string&gt;Droid Sans Fallback&lt;/string&gt;
        &lt;string&gt;WenQuanYi Zen Hei&lt;/string&gt;
        ...</code></pre>
<p><code>&lt;string&gt;WenQuanYi Micro Hei Mono&lt;/string&gt;</code>則也是加在<code>monospace</code>裡。</p>
<pre><code class="language-xml">&lt;match target="pattern"&gt;
    &lt;test qual="any" name="family"&gt;
        &lt;string&gt;monospace&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name="lang"&gt;
        &lt;string&gt;zh-tw&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name="family" mode="prepend" binding="strong"&gt;
        &lt;string&gt;WenQuanYi Micro Hei Mono&lt;/string&gt;
        &lt;string&gt;Droid Sans Fallback&lt;/string&gt;
        &lt;string&gt;WenQuanYi Zen Hei Mono&lt;/string&gt;
        ...</code></pre>
<h2>打完收工</h2>
<p><del>記得千萬不要手殘在<code>Console</code>中輸入<code>sudo fc-cache -fv</code>或是<code>sudo fc-font -v</code>，別怪我沒提醒你。</del></p>
<p>不打上面的指令更新字型快取的原因是因為它有機會造成<code>Chrome</code>的分頁標籤變成亂碼，不過我已經查到方法的可以修復了。</p>
<h4>/etc/fonts/conf.d/49-sansserif.conf</h4>
<p>打開這個文件，然後將<code>sans-serif</code>改成你要的字型就可以了。</p>
<p>這樣你愛怎麼下<code>sudo fc-cache -fv</code>或是<code>sudo fc-cache -v</code>都隨便你。</p>
<pre><code class="language-xml">        &lt;edit name="family" mode="append_last"&gt;
            &lt;!--string&gt;sans-serif&lt;/string--&gt;
            &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;
        &lt;/edit&gt;
    &lt;/match&gt;
&lt;/fontconfig&gt;</code></pre>
<p><strong>Update: 2014/05/04</strong></p>]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Ubuntu內建PCRE Library所造成的PHP Segmentation Fault]]></title>
		<link href="http://scar.tw/article/2014/02/23/ubuntu-bundled-pcre-and-php-segmentation-fault/" />
		<id>urn:uuid:15f2dac7-f7d0-e0e3-6032-51fa94b3fb3f</id>
		<updated>2014-02-23T15:22:14+08:00</updated>
		<summary type="html"><![CDATA[<h2>接續</h2>
<p>我前天說到我要找時間查查到底是什麼原因造成<code>PHP</code>的<code>Segmentation Fault</code>，我想本篇文章的標題已經指名原因了，<del>那我就結束這回合</del>。</p>
<p>當然我還是在這邊紀錄一下流程以及解決方法，然後在除錯的過程中還順便解了一個<code>PHPBrew</code>的<code>Bug</code>，這個<code>Bug</code>就是關於<code>./configure</code>找不到<code>libpcre(.a|.so)</code>的問題，原因是出在於系統架構的判斷。</p>
<p>先不管這個，我之前說過只要<code>preg_match()</code>只要輸入的字串一長就會發生錯誤，所以我們朝<code>PCRE Library</code>進行。</p>
<!--more-->
<h2>觀察 ./configure 設定配置</h2>
<p>我找了一個之前編譯的正常<code>PHP</code>所使用的配置，現在有問題的配置做比對。其中發現<code>PCRE</code>的設定方式不相同。</p>
<p>舊的配置關於<code>PCRE</code>的部份只有<code>--with-pcre-regex</code>，而新的配置則是<code>--with-pcre-regex=/usr --with-pcre-dir=/usr</code>。</p>
<p>新的<code>--with-pcre-regex=/usr</code>其實不影響執行，真正有問題的部份出在於<code>--with-pcre-regex</code>與<code>--with-pcre-regex=/usr</code>的對於實際編時所引入的函式庫不同。</p>
<p><code>--with-pcre-regex</code>所代表的是編譯時引入<code>PHP</code>內建的<code>PCRE</code>函式庫，而<code>--with-pcre-regex=/usr</code>所代表的是引入外部的<code>PCRE</code>函式庫。</p>
<p>造成的原因是因為<code>PHPBrew</code>的版次問題所造成，它會檢查系統中是否已經有<code>PCRE</code>函式庫，如果已經存在就會自動在<code>--with-pcre-regex</code>後面加上<code>prefix</code>。</p>
<h2>使用不同的函式庫</h2>
<p>為了要測試原因是否是系統內建的問題，或者是只要引入外部<code>PCRE</code>就會出錯，所以我就另外編譯了新的<code>PCRE</code>函式庫作為測試。</p>
<ul>
<li>PCRE版本
<ul>
<li>8.31-2 <code>Ubuntu 13.10</code>內建</li>
<li>8.32 <code>PHP 5.4.25</code>內建</li>
<li>8.34 自行編譯最新版</li>
</ul></li>
</ul>
<p>編譯過程我就省略，<code>PHP 5.4.25</code>以及自行編譯的<code>PCRE</code>都可以正常執行。最後結果就是系統內建的<code>PCRE</code>有問題，並且連帶系統內建的<code>PHP 5.5.3</code>都會出現同樣的問題。</p>
<h2>解決方案</h2>
<p>雖然不知道內建的<code>PCRE</code>究竟是哪邊出問題，不過我有兩種解決方法。不是移除系統內建的<code>PCRE</code>讓<code>PHP</code>用本身的函式庫，就是使用自行編譯的<code>PCRE</code>。</p>
<p>下面我就把我的<code>PHPBrew</code>安裝設定公開出來，因為我是使用自行編譯的<code>PCRE</code>所以在最後要指定函式庫位置。</p>
<pre><code>phpbrew -d install 5.4.25 +default+db+openssl+iconv -- --with-pcre-regex=/opt/pcre</code></pre>]]></summary>
	</entry>
</feed>